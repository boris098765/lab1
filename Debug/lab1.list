
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b7c  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08005d08  08005d08  00006d08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d58  08005d58  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005d58  08005d58  00006d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d60  08005d60  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d60  08005d60  00006d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d64  08005d64  00006d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005d68  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007070  2**0
                  CONTENTS
 10 .bss          000003fc  20000070  20000070  00007070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000046c  2000046c  00007070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d266  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cc9  00000000  00000000  00014306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  00015fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ff  00000000  00000000  00016c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e81  00000000  00000000  00017687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e3c7  00000000  00000000  00038508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb270  00000000  00000000  000468cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00111b3f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c54  00000000  00000000  00111b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  001157d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005cec 	.word	0x08005cec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005cec 	.word	0x08005cec

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295
 8000b94:	f000 b96a 	b.w	8000e6c <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	460c      	mov	r4, r1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d14e      	bne.n	8000c5a <__udivmoddi4+0xaa>
 8000bbc:	4694      	mov	ip, r2
 8000bbe:	458c      	cmp	ip, r1
 8000bc0:	4686      	mov	lr, r0
 8000bc2:	fab2 f282 	clz	r2, r2
 8000bc6:	d962      	bls.n	8000c8e <__udivmoddi4+0xde>
 8000bc8:	b14a      	cbz	r2, 8000bde <__udivmoddi4+0x2e>
 8000bca:	f1c2 0320 	rsb	r3, r2, #32
 8000bce:	4091      	lsls	r1, r2
 8000bd0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd8:	4319      	orrs	r1, r3
 8000bda:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000be2:	fa1f f68c 	uxth.w	r6, ip
 8000be6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bee:	fb07 1114 	mls	r1, r7, r4, r1
 8000bf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf6:	fb04 f106 	mul.w	r1, r4, r6
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x64>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c06:	f080 8112 	bcs.w	8000e2e <__udivmoddi4+0x27e>
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	f240 810f 	bls.w	8000e2e <__udivmoddi4+0x27e>
 8000c10:	3c02      	subs	r4, #2
 8000c12:	4463      	add	r3, ip
 8000c14:	1a59      	subs	r1, r3, r1
 8000c16:	fa1f f38e 	uxth.w	r3, lr
 8000c1a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c1e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c26:	fb00 f606 	mul.w	r6, r0, r6
 8000c2a:	429e      	cmp	r6, r3
 8000c2c:	d90a      	bls.n	8000c44 <__udivmoddi4+0x94>
 8000c2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c32:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c36:	f080 80fc 	bcs.w	8000e32 <__udivmoddi4+0x282>
 8000c3a:	429e      	cmp	r6, r3
 8000c3c:	f240 80f9 	bls.w	8000e32 <__udivmoddi4+0x282>
 8000c40:	4463      	add	r3, ip
 8000c42:	3802      	subs	r0, #2
 8000c44:	1b9b      	subs	r3, r3, r6
 8000c46:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	b11d      	cbz	r5, 8000c56 <__udivmoddi4+0xa6>
 8000c4e:	40d3      	lsrs	r3, r2
 8000c50:	2200      	movs	r2, #0
 8000c52:	e9c5 3200 	strd	r3, r2, [r5]
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d905      	bls.n	8000c6a <__udivmoddi4+0xba>
 8000c5e:	b10d      	cbz	r5, 8000c64 <__udivmoddi4+0xb4>
 8000c60:	e9c5 0100 	strd	r0, r1, [r5]
 8000c64:	2100      	movs	r1, #0
 8000c66:	4608      	mov	r0, r1
 8000c68:	e7f5      	b.n	8000c56 <__udivmoddi4+0xa6>
 8000c6a:	fab3 f183 	clz	r1, r3
 8000c6e:	2900      	cmp	r1, #0
 8000c70:	d146      	bne.n	8000d00 <__udivmoddi4+0x150>
 8000c72:	42a3      	cmp	r3, r4
 8000c74:	d302      	bcc.n	8000c7c <__udivmoddi4+0xcc>
 8000c76:	4290      	cmp	r0, r2
 8000c78:	f0c0 80f0 	bcc.w	8000e5c <__udivmoddi4+0x2ac>
 8000c7c:	1a86      	subs	r6, r0, r2
 8000c7e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c82:	2001      	movs	r0, #1
 8000c84:	2d00      	cmp	r5, #0
 8000c86:	d0e6      	beq.n	8000c56 <__udivmoddi4+0xa6>
 8000c88:	e9c5 6300 	strd	r6, r3, [r5]
 8000c8c:	e7e3      	b.n	8000c56 <__udivmoddi4+0xa6>
 8000c8e:	2a00      	cmp	r2, #0
 8000c90:	f040 8090 	bne.w	8000db4 <__udivmoddi4+0x204>
 8000c94:	eba1 040c 	sub.w	r4, r1, ip
 8000c98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c9c:	fa1f f78c 	uxth.w	r7, ip
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ca6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000caa:	fb08 4416 	mls	r4, r8, r6, r4
 8000cae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb2:	fb07 f006 	mul.w	r0, r7, r6
 8000cb6:	4298      	cmp	r0, r3
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x11c>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x11a>
 8000cc4:	4298      	cmp	r0, r3
 8000cc6:	f200 80cd 	bhi.w	8000e64 <__udivmoddi4+0x2b4>
 8000cca:	4626      	mov	r6, r4
 8000ccc:	1a1c      	subs	r4, r3, r0
 8000cce:	fa1f f38e 	uxth.w	r3, lr
 8000cd2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cd6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cde:	fb00 f707 	mul.w	r7, r0, r7
 8000ce2:	429f      	cmp	r7, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x148>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x146>
 8000cf0:	429f      	cmp	r7, r3
 8000cf2:	f200 80b0 	bhi.w	8000e56 <__udivmoddi4+0x2a6>
 8000cf6:	4620      	mov	r0, r4
 8000cf8:	1bdb      	subs	r3, r3, r7
 8000cfa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfe:	e7a5      	b.n	8000c4c <__udivmoddi4+0x9c>
 8000d00:	f1c1 0620 	rsb	r6, r1, #32
 8000d04:	408b      	lsls	r3, r1
 8000d06:	fa22 f706 	lsr.w	r7, r2, r6
 8000d0a:	431f      	orrs	r7, r3
 8000d0c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d10:	fa04 f301 	lsl.w	r3, r4, r1
 8000d14:	ea43 030c 	orr.w	r3, r3, ip
 8000d18:	40f4      	lsrs	r4, r6
 8000d1a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d1e:	0c38      	lsrs	r0, r7, #16
 8000d20:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d24:	fbb4 fef0 	udiv	lr, r4, r0
 8000d28:	fa1f fc87 	uxth.w	ip, r7
 8000d2c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d30:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d34:	fb0e f90c 	mul.w	r9, lr, ip
 8000d38:	45a1      	cmp	r9, r4
 8000d3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3e:	d90a      	bls.n	8000d56 <__udivmoddi4+0x1a6>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d46:	f080 8084 	bcs.w	8000e52 <__udivmoddi4+0x2a2>
 8000d4a:	45a1      	cmp	r9, r4
 8000d4c:	f240 8081 	bls.w	8000e52 <__udivmoddi4+0x2a2>
 8000d50:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d54:	443c      	add	r4, r7
 8000d56:	eba4 0409 	sub.w	r4, r4, r9
 8000d5a:	fa1f f983 	uxth.w	r9, r3
 8000d5e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d62:	fb00 4413 	mls	r4, r0, r3, r4
 8000d66:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d6e:	45a4      	cmp	ip, r4
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0x1d2>
 8000d72:	193c      	adds	r4, r7, r4
 8000d74:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d78:	d267      	bcs.n	8000e4a <__udivmoddi4+0x29a>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	d965      	bls.n	8000e4a <__udivmoddi4+0x29a>
 8000d7e:	3b02      	subs	r3, #2
 8000d80:	443c      	add	r4, r7
 8000d82:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d86:	fba0 9302 	umull	r9, r3, r0, r2
 8000d8a:	eba4 040c 	sub.w	r4, r4, ip
 8000d8e:	429c      	cmp	r4, r3
 8000d90:	46ce      	mov	lr, r9
 8000d92:	469c      	mov	ip, r3
 8000d94:	d351      	bcc.n	8000e3a <__udivmoddi4+0x28a>
 8000d96:	d04e      	beq.n	8000e36 <__udivmoddi4+0x286>
 8000d98:	b155      	cbz	r5, 8000db0 <__udivmoddi4+0x200>
 8000d9a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d9e:	eb64 040c 	sbc.w	r4, r4, ip
 8000da2:	fa04 f606 	lsl.w	r6, r4, r6
 8000da6:	40cb      	lsrs	r3, r1
 8000da8:	431e      	orrs	r6, r3
 8000daa:	40cc      	lsrs	r4, r1
 8000dac:	e9c5 6400 	strd	r6, r4, [r5]
 8000db0:	2100      	movs	r1, #0
 8000db2:	e750      	b.n	8000c56 <__udivmoddi4+0xa6>
 8000db4:	f1c2 0320 	rsb	r3, r2, #32
 8000db8:	fa20 f103 	lsr.w	r1, r0, r3
 8000dbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc0:	fa24 f303 	lsr.w	r3, r4, r3
 8000dc4:	4094      	lsls	r4, r2
 8000dc6:	430c      	orrs	r4, r1
 8000dc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dcc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dd0:	fa1f f78c 	uxth.w	r7, ip
 8000dd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd8:	fb08 3110 	mls	r1, r8, r0, r3
 8000ddc:	0c23      	lsrs	r3, r4, #16
 8000dde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de2:	fb00 f107 	mul.w	r1, r0, r7
 8000de6:	4299      	cmp	r1, r3
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x24c>
 8000dea:	eb1c 0303 	adds.w	r3, ip, r3
 8000dee:	f100 36ff 	add.w	r6, r0, #4294967295
 8000df2:	d22c      	bcs.n	8000e4e <__udivmoddi4+0x29e>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	d92a      	bls.n	8000e4e <__udivmoddi4+0x29e>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e04:	fb08 3311 	mls	r3, r8, r1, r3
 8000e08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e0c:	fb01 f307 	mul.w	r3, r1, r7
 8000e10:	42a3      	cmp	r3, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x276>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e1c:	d213      	bcs.n	8000e46 <__udivmoddi4+0x296>
 8000e1e:	42a3      	cmp	r3, r4
 8000e20:	d911      	bls.n	8000e46 <__udivmoddi4+0x296>
 8000e22:	3902      	subs	r1, #2
 8000e24:	4464      	add	r4, ip
 8000e26:	1ae4      	subs	r4, r4, r3
 8000e28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e2c:	e739      	b.n	8000ca2 <__udivmoddi4+0xf2>
 8000e2e:	4604      	mov	r4, r0
 8000e30:	e6f0      	b.n	8000c14 <__udivmoddi4+0x64>
 8000e32:	4608      	mov	r0, r1
 8000e34:	e706      	b.n	8000c44 <__udivmoddi4+0x94>
 8000e36:	45c8      	cmp	r8, r9
 8000e38:	d2ae      	bcs.n	8000d98 <__udivmoddi4+0x1e8>
 8000e3a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e3e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e42:	3801      	subs	r0, #1
 8000e44:	e7a8      	b.n	8000d98 <__udivmoddi4+0x1e8>
 8000e46:	4631      	mov	r1, r6
 8000e48:	e7ed      	b.n	8000e26 <__udivmoddi4+0x276>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	e799      	b.n	8000d82 <__udivmoddi4+0x1d2>
 8000e4e:	4630      	mov	r0, r6
 8000e50:	e7d4      	b.n	8000dfc <__udivmoddi4+0x24c>
 8000e52:	46d6      	mov	lr, sl
 8000e54:	e77f      	b.n	8000d56 <__udivmoddi4+0x1a6>
 8000e56:	4463      	add	r3, ip
 8000e58:	3802      	subs	r0, #2
 8000e5a:	e74d      	b.n	8000cf8 <__udivmoddi4+0x148>
 8000e5c:	4606      	mov	r6, r0
 8000e5e:	4623      	mov	r3, r4
 8000e60:	4608      	mov	r0, r1
 8000e62:	e70f      	b.n	8000c84 <__udivmoddi4+0xd4>
 8000e64:	3e02      	subs	r6, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	e730      	b.n	8000ccc <__udivmoddi4+0x11c>
 8000e6a:	bf00      	nop

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <HAL_UART_RxCpltCallback>:

uint8_t rx_buffer[FULL_MSG_LEN];
uint8_t msg_buffer[FULL_MSG_LEN];
uint8_t msg_received_flug;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
    if (huart->Instance != USART2) return;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a15      	ldr	r2, [pc, #84]	@ (8000ed4 <HAL_UART_RxCpltCallback+0x64>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d11e      	bne.n	8000ec0 <HAL_UART_RxCpltCallback+0x50>
    if ( (rx_buffer[0] != 0xFF) | (rx_buffer[FULL_MSG_LEN-1] != 0x0F) ) return;
 8000e82:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <HAL_UART_RxCpltCallback+0x68>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2bff      	cmp	r3, #255	@ 0xff
 8000e88:	bf14      	ite	ne
 8000e8a:	2301      	movne	r3, #1
 8000e8c:	2300      	moveq	r3, #0
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <HAL_UART_RxCpltCallback+0x68>)
 8000e92:	7a1b      	ldrb	r3, [r3, #8]
 8000e94:	2b0f      	cmp	r3, #15
 8000e96:	bf14      	ite	ne
 8000e98:	2301      	movne	r3, #1
 8000e9a:	2300      	moveq	r3, #0
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10e      	bne.n	8000ec4 <HAL_UART_RxCpltCallback+0x54>
    if (msg_received_flug) return;
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8000edc <HAL_UART_RxCpltCallback+0x6c>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d10c      	bne.n	8000ec8 <HAL_UART_RxCpltCallback+0x58>

    memcpy(msg_buffer, rx_buffer, sizeof(rx_buffer));
 8000eae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <HAL_UART_RxCpltCallback+0x70>)
 8000eb0:	4a09      	ldr	r2, [pc, #36]	@ (8000ed8 <HAL_UART_RxCpltCallback+0x68>)
 8000eb2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eb4:	c303      	stmia	r3!, {r0, r1}
 8000eb6:	701a      	strb	r2, [r3, #0]
    msg_received_flug = 1;
 8000eb8:	4b08      	ldr	r3, [pc, #32]	@ (8000edc <HAL_UART_RxCpltCallback+0x6c>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
 8000ebe:	e004      	b.n	8000eca <HAL_UART_RxCpltCallback+0x5a>
    if (huart->Instance != USART2) return;
 8000ec0:	bf00      	nop
 8000ec2:	e002      	b.n	8000eca <HAL_UART_RxCpltCallback+0x5a>
    if ( (rx_buffer[0] != 0xFF) | (rx_buffer[FULL_MSG_LEN-1] != 0x0F) ) return;
 8000ec4:	bf00      	nop
 8000ec6:	e000      	b.n	8000eca <HAL_UART_RxCpltCallback+0x5a>
    if (msg_received_flug) return;
 8000ec8:	bf00      	nop
}
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	40004400 	.word	0x40004400
 8000ed8:	2000020c 	.word	0x2000020c
 8000edc:	20000221 	.word	0x20000221
 8000ee0:	20000218 	.word	0x20000218

08000ee4 <setPWM>:
}


/* PWM */

void setPWM(TIM_HandleTypeDef *htim, uint32_t channel, uint16_t value) {
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(htim, channel, value);
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d104      	bne.n	8000f02 <setPWM+0x1e>
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	88fa      	ldrh	r2, [r7, #6]
 8000efe:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000f00:	e013      	b.n	8000f2a <setPWM+0x46>
	__HAL_TIM_SET_COMPARE(htim, channel, value);
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	2b04      	cmp	r3, #4
 8000f06:	d104      	bne.n	8000f12 <setPWM+0x2e>
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000f10:	e00b      	b.n	8000f2a <setPWM+0x46>
	__HAL_TIM_SET_COMPARE(htim, channel, value);
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d104      	bne.n	8000f22 <setPWM+0x3e>
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	88fb      	ldrh	r3, [r7, #6]
 8000f1e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000f20:	e003      	b.n	8000f2a <setPWM+0x46>
	__HAL_TIM_SET_COMPARE(htim, channel, value);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <TIM3_setup>:
uint16_t led_counter;
int8_t led_inc = 1;
uint8_t led_brightness_table[CRT_MAX+1];

// Таймер смены яркости
void TIM3_setup() {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 8000f3c:	4802      	ldr	r0, [pc, #8]	@ (8000f48 <TIM3_setup+0x10>)
 8000f3e:	f002 f981 	bl	8003244 <HAL_TIM_Base_Start_IT>
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200000d4 	.word	0x200000d4

08000f4c <setup_TIM4>:

// Таймер ШИМ диодов
void setup_TIM4() {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
	TIM_OC_InitTypeDef sConfigOC;
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f52:	2360      	movs	r3, #96	@ 0x60
 8000f54:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]

	HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2200      	movs	r2, #0
 8000f66:	4619      	mov	r1, r3
 8000f68:	4805      	ldr	r0, [pc, #20]	@ (8000f80 <setup_TIM4+0x34>)
 8000f6a:	f002 fc45 	bl	80037f8 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4803      	ldr	r0, [pc, #12]	@ (8000f80 <setup_TIM4+0x34>)
 8000f72:	f002 fa89 	bl	8003488 <HAL_TIM_PWM_Start>
}
 8000f76:	bf00      	nop
 8000f78:	3720      	adds	r7, #32
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000011c 	.word	0x2000011c

08000f84 <setFlashSpeed>:

void setFlashSpeed(float frequency) {
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	ed87 0a01 	vstr	s0, [r7, #4]
	//if (frequency == 0) return;

	frequency *= CRT_MAX * 2;
 8000f8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f92:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000fe0 <setFlashSpeed+0x5c>
 8000f96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f9a:	edc7 7a01 	vstr	s15, [r7, #4]
	uint32_t arr = (MAIN_CLOCK / (TIM3_PSC+1)) / frequency - 1;
 8000f9e:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fe4 <setFlashSpeed+0x60>
 8000fa2:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000faa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fb6:	ee17 3a90 	vmov	r3, s15
 8000fba:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim3, arr);
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <setFlashSpeed+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fc4:	4a08      	ldr	r2, [pc, #32]	@ (8000fe8 <setFlashSpeed+0x64>)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000fca:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <setFlashSpeed+0x64>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000fd2:	bf00      	nop
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	43ff0000 	.word	0x43ff0000
 8000fe4:	477a0000 	.word	0x477a0000
 8000fe8:	200000d4 	.word	0x200000d4

08000fec <HAL_TIM_PeriodElapsedCallback>:

// Прерывание смены яркости
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
    if (htim->Instance != TIM3) return;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8001068 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d12f      	bne.n	800105e <HAL_TIM_PeriodElapsedCallback+0x72>
    led_counter += led_inc;
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800106c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001000:	f993 3000 	ldrsb.w	r3, [r3]
 8001004:	b29a      	uxth	r2, r3
 8001006:	4b1a      	ldr	r3, [pc, #104]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	b29a      	uxth	r2, r3
 800100e:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001010:	801a      	strh	r2, [r3, #0]

    if (led_counter >= CRT_MAX) led_inc*=-1;
 8001012:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	2bfe      	cmp	r3, #254	@ 0xfe
 8001018:	d909      	bls.n	800102e <HAL_TIM_PeriodElapsedCallback+0x42>
 800101a:	4b14      	ldr	r3, [pc, #80]	@ (800106c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800101c:	f993 3000 	ldrsb.w	r3, [r3]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	425b      	negs	r3, r3
 8001024:	b2db      	uxtb	r3, r3
 8001026:	b25a      	sxtb	r2, r3
 8001028:	4b10      	ldr	r3, [pc, #64]	@ (800106c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800102a:	701a      	strb	r2, [r3, #0]
 800102c:	e00c      	b.n	8001048 <HAL_TIM_PeriodElapsedCallback+0x5c>
    else if (led_counter == 0) led_inc*=-1;
 800102e:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d108      	bne.n	8001048 <HAL_TIM_PeriodElapsedCallback+0x5c>
 8001036:	4b0d      	ldr	r3, [pc, #52]	@ (800106c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001038:	f993 3000 	ldrsb.w	r3, [r3]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	425b      	negs	r3, r3
 8001040:	b2db      	uxtb	r3, r3
 8001042:	b25a      	sxtb	r2, r3
 8001044:	4b09      	ldr	r3, [pc, #36]	@ (800106c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001046:	701a      	strb	r2, [r3, #0]

    setPWM(&htim4, TIM_CHANNEL_1, led_brightness_table[led_counter]);
 8001048:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001050:	5c9b      	ldrb	r3, [r3, r2]
 8001052:	461a      	mov	r2, r3
 8001054:	2100      	movs	r1, #0
 8001056:	4808      	ldr	r0, [pc, #32]	@ (8001078 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001058:	f7ff ff44 	bl	8000ee4 <setPWM>
 800105c:	e000      	b.n	8001060 <HAL_TIM_PeriodElapsedCallback+0x74>
    if (htim->Instance != TIM3) return;
 800105e:	bf00      	nop
}
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40000400 	.word	0x40000400
 800106c:	20000000 	.word	0x20000000
 8001070:	2000022c 	.word	0x2000022c
 8001074:	20000230 	.word	0x20000230
 8001078:	2000011c 	.word	0x2000011c

0800107c <setup_CRT>:

void setup_CRT() {
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	set_CRT_Gamma(MAIN_CRT_GAMMA);
 8001080:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800108c <setup_CRT+0x10>
 8001084:	f000 f804 	bl	8001090 <set_CRT_Gamma>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	400ccccd 	.word	0x400ccccd

08001090 <set_CRT_Gamma>:

void set_CRT_Gamma(float gamma) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	ed87 0a01 	vstr	s0, [r7, #4]
	CRT_Gamma = gamma;
 800109a:	4a15      	ldr	r2, [pc, #84]	@ (80010f0 <set_CRT_Gamma+0x60>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6013      	str	r3, [r2, #0]
	CRT_K = ( CRT_MAX / (pow(CRT_MAX, CRT_Gamma)) );
 80010a0:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <set_CRT_Gamma+0x60>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff f9f3 	bl	8000490 <__aeabi_f2d>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	ec43 2b11 	vmov	d1, r2, r3
 80010b2:	ed9f 0b0d 	vldr	d0, [pc, #52]	@ 80010e8 <set_CRT_Gamma+0x58>
 80010b6:	f003 feb9 	bl	8004e2c <pow>
 80010ba:	ec53 2b10 	vmov	r2, r3, d0
 80010be:	a10a      	add	r1, pc, #40	@ (adr r1, 80010e8 <set_CRT_Gamma+0x58>)
 80010c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010c4:	f7ff fb66 	bl	8000794 <__aeabi_ddiv>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4610      	mov	r0, r2
 80010ce:	4619      	mov	r1, r3
 80010d0:	f7ff fd06 	bl	8000ae0 <__aeabi_d2f>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4a07      	ldr	r2, [pc, #28]	@ (80010f4 <set_CRT_Gamma+0x64>)
 80010d8:	6013      	str	r3, [r2, #0]

	calc_brightness_table();
 80010da:	f000 f80d 	bl	80010f8 <calc_brightness_table>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	00000000 	.word	0x00000000
 80010ec:	406fe000 	.word	0x406fe000
 80010f0:	20000228 	.word	0x20000228
 80010f4:	20000224 	.word	0x20000224

080010f8 <calc_brightness_table>:

void calc_brightness_table() {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
	for (uint16_t i=0; i<=CRT_MAX; i++) {
 80010fe:	2300      	movs	r3, #0
 8001100:	80fb      	strh	r3, [r7, #6]
 8001102:	e00c      	b.n	800111e <calc_brightness_table+0x26>
		led_brightness_table[i] = (uint8_t)get_CRT(i);
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	4618      	mov	r0, r3
 8001108:	f000 f814 	bl	8001134 <get_CRT>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	b2d1      	uxtb	r1, r2
 8001114:	4a06      	ldr	r2, [pc, #24]	@ (8001130 <calc_brightness_table+0x38>)
 8001116:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i=0; i<=CRT_MAX; i++) {
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	3301      	adds	r3, #1
 800111c:	80fb      	strh	r3, [r7, #6]
 800111e:	88fb      	ldrh	r3, [r7, #6]
 8001120:	2bff      	cmp	r3, #255	@ 0xff
 8001122:	d9ef      	bls.n	8001104 <calc_brightness_table+0xc>
	}
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000230 	.word	0x20000230

08001134 <get_CRT>:

uint16_t get_CRT(uint16_t val) {
 8001134:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	80fb      	strh	r3, [r7, #6]
	return (uint16_t)( CRT_K * pow(val, CRT_Gamma) );
 8001140:	4b16      	ldr	r3, [pc, #88]	@ (800119c <get_CRT+0x68>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f9a3 	bl	8000490 <__aeabi_f2d>
 800114a:	4604      	mov	r4, r0
 800114c:	460d      	mov	r5, r1
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f97b 	bl	800044c <__aeabi_ui2d>
 8001156:	4680      	mov	r8, r0
 8001158:	4689      	mov	r9, r1
 800115a:	4b11      	ldr	r3, [pc, #68]	@ (80011a0 <get_CRT+0x6c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f996 	bl	8000490 <__aeabi_f2d>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	ec43 2b11 	vmov	d1, r2, r3
 800116c:	ec49 8b10 	vmov	d0, r8, r9
 8001170:	f003 fe5c 	bl	8004e2c <pow>
 8001174:	ec53 2b10 	vmov	r2, r3, d0
 8001178:	4620      	mov	r0, r4
 800117a:	4629      	mov	r1, r5
 800117c:	f7ff f9e0 	bl	8000540 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f7ff fc8a 	bl	8000aa0 <__aeabi_d2uiz>
 800118c:	4603      	mov	r3, r0
 800118e:	b29b      	uxth	r3, r3
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800119a:	bf00      	nop
 800119c:	20000224 	.word	0x20000224
 80011a0:	20000228 	.word	0x20000228

080011a4 <setup_TIM2>:

#define SERVO_ANGLE           180
#define SERVO_MAXVAL          360

// Таймер ШИМ сервы
void setup_TIM2() {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0
	TIM_OC_InitTypeDef sConfigOC;
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011aa:	2360      	movs	r3, #96	@ 0x60
 80011ac:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]

	HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2200      	movs	r2, #0
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <setup_TIM2+0x34>)
 80011c2:	f002 fb19 	bl	80037f8 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80011c6:	2100      	movs	r1, #0
 80011c8:	4803      	ldr	r0, [pc, #12]	@ (80011d8 <setup_TIM2+0x34>)
 80011ca:	f002 f95d 	bl	8003488 <HAL_TIM_PWM_Start>
}
 80011ce:	bf00      	nop
 80011d0:	3720      	adds	r7, #32
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	2000008c 	.word	0x2000008c

080011dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e0:	f000 fc7a 	bl	8001ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e4:	f000 f824 	bl	8001230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e8:	f000 fa34 	bl	8001654 <MX_GPIO_Init>
  MX_DMA_Init();
 80011ec:	f000 fa12 	bl	8001614 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011f0:	f000 f9e6 	bl	80015c0 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80011f4:	f000 f96e 	bl	80014d4 <MX_TIM4_Init>
  MX_TIM2_Init();
 80011f8:	f000 f882 	bl	8001300 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011fc:	f000 f8f6 	bl	80013ec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart2, rx_buffer, sizeof(rx_buffer));
 8001200:	2209      	movs	r2, #9
 8001202:	4909      	ldr	r1, [pc, #36]	@ (8001228 <main+0x4c>)
 8001204:	4809      	ldr	r0, [pc, #36]	@ (800122c <main+0x50>)
 8001206:	f003 f901 	bl	800440c <HAL_UART_Receive_DMA>

  setup_CRT();
 800120a:	f7ff ff37 	bl	800107c <setup_CRT>

  setup_TIM2();
 800120e:	f7ff ffc9 	bl	80011a4 <setup_TIM2>
  setup_TIM4();
 8001212:	f7ff fe9b 	bl	8000f4c <setup_TIM4>

  setFlashSpeed( MAIN_LED_FLASH_FREQ );
 8001216:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800121a:	f7ff feb3 	bl	8000f84 <setFlashSpeed>
  TIM3_setup();
 800121e:	f7ff fe8b 	bl	8000f38 <TIM3_setup>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001222:	bf00      	nop
 8001224:	e7fd      	b.n	8001222 <main+0x46>
 8001226:	bf00      	nop
 8001228:	2000020c 	.word	0x2000020c
 800122c:	20000164 	.word	0x20000164

08001230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b094      	sub	sp, #80	@ 0x50
 8001234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001236:	f107 0320 	add.w	r3, r7, #32
 800123a:	2230      	movs	r2, #48	@ 0x30
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f003 fdc2 	bl	8004dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	4b27      	ldr	r3, [pc, #156]	@ (80012f8 <SystemClock_Config+0xc8>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125c:	4a26      	ldr	r2, [pc, #152]	@ (80012f8 <SystemClock_Config+0xc8>)
 800125e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001262:	6413      	str	r3, [r2, #64]	@ 0x40
 8001264:	4b24      	ldr	r3, [pc, #144]	@ (80012f8 <SystemClock_Config+0xc8>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001268:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001270:	2300      	movs	r3, #0
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	4b21      	ldr	r3, [pc, #132]	@ (80012fc <SystemClock_Config+0xcc>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a20      	ldr	r2, [pc, #128]	@ (80012fc <SystemClock_Config+0xcc>)
 800127a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b1e      	ldr	r3, [pc, #120]	@ (80012fc <SystemClock_Config+0xcc>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800128c:	2301      	movs	r3, #1
 800128e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001290:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001296:	2302      	movs	r3, #2
 8001298:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800129a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800129e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012a0:	2304      	movs	r3, #4
 80012a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80012a4:	2340      	movs	r3, #64	@ 0x40
 80012a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a8:	2302      	movs	r3, #2
 80012aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012ac:	2304      	movs	r3, #4
 80012ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b0:	f107 0320 	add.w	r3, r7, #32
 80012b4:	4618      	mov	r0, r3
 80012b6:	f001 fadd 	bl	8002874 <HAL_RCC_OscConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012c0:	f000 fa18 	bl	80016f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c4:	230f      	movs	r3, #15
 80012c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c8:	2302      	movs	r3, #2
 80012ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	2102      	movs	r1, #2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f001 fd3f 	bl	8002d64 <HAL_RCC_ClockConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012ec:	f000 fa02 	bl	80016f4 <Error_Handler>
  }
}
 80012f0:	bf00      	nop
 80012f2:	3750      	adds	r7, #80	@ 0x50
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40007000 	.word	0x40007000

08001300 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08e      	sub	sp, #56	@ 0x38
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001306:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001314:	f107 0320 	add.w	r3, r7, #32
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
 800132c:	615a      	str	r2, [r3, #20]
 800132e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001330:	4b2d      	ldr	r3, [pc, #180]	@ (80013e8 <MX_TIM2_Init+0xe8>)
 8001332:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001336:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3555;
 8001338:	4b2b      	ldr	r3, [pc, #172]	@ (80013e8 <MX_TIM2_Init+0xe8>)
 800133a:	f640 52e3 	movw	r2, #3555	@ 0xde3
 800133e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001340:	4b29      	ldr	r3, [pc, #164]	@ (80013e8 <MX_TIM2_Init+0xe8>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 359;
 8001346:	4b28      	ldr	r3, [pc, #160]	@ (80013e8 <MX_TIM2_Init+0xe8>)
 8001348:	f240 1267 	movw	r2, #359	@ 0x167
 800134c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134e:	4b26      	ldr	r3, [pc, #152]	@ (80013e8 <MX_TIM2_Init+0xe8>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001354:	4b24      	ldr	r3, [pc, #144]	@ (80013e8 <MX_TIM2_Init+0xe8>)
 8001356:	2200      	movs	r2, #0
 8001358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800135a:	4823      	ldr	r0, [pc, #140]	@ (80013e8 <MX_TIM2_Init+0xe8>)
 800135c:	f001 ff22 	bl	80031a4 <HAL_TIM_Base_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001366:	f000 f9c5 	bl	80016f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800136a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800136e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001370:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001374:	4619      	mov	r1, r3
 8001376:	481c      	ldr	r0, [pc, #112]	@ (80013e8 <MX_TIM2_Init+0xe8>)
 8001378:	f002 fb5c 	bl	8003a34 <HAL_TIM_ConfigClockSource>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001382:	f000 f9b7 	bl	80016f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001386:	4818      	ldr	r0, [pc, #96]	@ (80013e8 <MX_TIM2_Init+0xe8>)
 8001388:	f001 ffcc 	bl	8003324 <HAL_TIM_OC_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001392:	f000 f9af 	bl	80016f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800139e:	f107 0320 	add.w	r3, r7, #32
 80013a2:	4619      	mov	r1, r3
 80013a4:	4810      	ldr	r0, [pc, #64]	@ (80013e8 <MX_TIM2_Init+0xe8>)
 80013a6:	f002 ff51 	bl	800424c <HAL_TIMEx_MasterConfigSynchronization>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80013b0:	f000 f9a0 	bl	80016f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	4619      	mov	r1, r3
 80013ca:	4807      	ldr	r0, [pc, #28]	@ (80013e8 <MX_TIM2_Init+0xe8>)
 80013cc:	f002 fa14 	bl	80037f8 <HAL_TIM_OC_ConfigChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80013d6:	f000 f98d 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013da:	4803      	ldr	r0, [pc, #12]	@ (80013e8 <MX_TIM2_Init+0xe8>)
 80013dc:	f000 fa20 	bl	8001820 <HAL_TIM_MspPostInit>

}
 80013e0:	bf00      	nop
 80013e2:	3738      	adds	r7, #56	@ 0x38
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	2000008c 	.word	0x2000008c

080013ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08e      	sub	sp, #56	@ 0x38
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001400:	f107 0320 	add.w	r3, r7, #32
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
 8001418:	615a      	str	r2, [r3, #20]
 800141a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800141c:	4b2b      	ldr	r3, [pc, #172]	@ (80014cc <MX_TIM3_Init+0xe0>)
 800141e:	4a2c      	ldr	r2, [pc, #176]	@ (80014d0 <MX_TIM3_Init+0xe4>)
 8001420:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8001422:	4b2a      	ldr	r3, [pc, #168]	@ (80014cc <MX_TIM3_Init+0xe0>)
 8001424:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001428:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142a:	4b28      	ldr	r3, [pc, #160]	@ (80014cc <MX_TIM3_Init+0xe0>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7499;
 8001430:	4b26      	ldr	r3, [pc, #152]	@ (80014cc <MX_TIM3_Init+0xe0>)
 8001432:	f641 524b 	movw	r2, #7499	@ 0x1d4b
 8001436:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001438:	4b24      	ldr	r3, [pc, #144]	@ (80014cc <MX_TIM3_Init+0xe0>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800143e:	4b23      	ldr	r3, [pc, #140]	@ (80014cc <MX_TIM3_Init+0xe0>)
 8001440:	2280      	movs	r2, #128	@ 0x80
 8001442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001444:	4821      	ldr	r0, [pc, #132]	@ (80014cc <MX_TIM3_Init+0xe0>)
 8001446:	f001 fead 	bl	80031a4 <HAL_TIM_Base_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001450:	f000 f950 	bl	80016f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001454:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001458:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800145a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800145e:	4619      	mov	r1, r3
 8001460:	481a      	ldr	r0, [pc, #104]	@ (80014cc <MX_TIM3_Init+0xe0>)
 8001462:	f002 fae7 	bl	8003a34 <HAL_TIM_ConfigClockSource>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800146c:	f000 f942 	bl	80016f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001470:	4816      	ldr	r0, [pc, #88]	@ (80014cc <MX_TIM3_Init+0xe0>)
 8001472:	f001 ff57 	bl	8003324 <HAL_TIM_OC_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800147c:	f000 f93a 	bl	80016f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001488:	f107 0320 	add.w	r3, r7, #32
 800148c:	4619      	mov	r1, r3
 800148e:	480f      	ldr	r0, [pc, #60]	@ (80014cc <MX_TIM3_Init+0xe0>)
 8001490:	f002 fedc 	bl	800424c <HAL_TIMEx_MasterConfigSynchronization>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800149a:	f000 f92b 	bl	80016f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2200      	movs	r2, #0
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	@ (80014cc <MX_TIM3_Init+0xe0>)
 80014b6:	f002 f99f 	bl	80037f8 <HAL_TIM_OC_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80014c0:	f000 f918 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	3738      	adds	r7, #56	@ 0x38
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200000d4 	.word	0x200000d4
 80014d0:	40000400 	.word	0x40000400

080014d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08e      	sub	sp, #56	@ 0x38
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e8:	f107 0320 	add.w	r3, r7, #32
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
 8001500:	615a      	str	r2, [r3, #20]
 8001502:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001504:	4b2c      	ldr	r3, [pc, #176]	@ (80015b8 <MX_TIM4_Init+0xe4>)
 8001506:	4a2d      	ldr	r2, [pc, #180]	@ (80015bc <MX_TIM4_Init+0xe8>)
 8001508:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 25-1;
 800150a:	4b2b      	ldr	r3, [pc, #172]	@ (80015b8 <MX_TIM4_Init+0xe4>)
 800150c:	2218      	movs	r2, #24
 800150e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001510:	4b29      	ldr	r3, [pc, #164]	@ (80015b8 <MX_TIM4_Init+0xe4>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8001516:	4b28      	ldr	r3, [pc, #160]	@ (80015b8 <MX_TIM4_Init+0xe4>)
 8001518:	22ff      	movs	r2, #255	@ 0xff
 800151a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151c:	4b26      	ldr	r3, [pc, #152]	@ (80015b8 <MX_TIM4_Init+0xe4>)
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001522:	4b25      	ldr	r3, [pc, #148]	@ (80015b8 <MX_TIM4_Init+0xe4>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001528:	4823      	ldr	r0, [pc, #140]	@ (80015b8 <MX_TIM4_Init+0xe4>)
 800152a:	f001 fe3b 	bl	80031a4 <HAL_TIM_Base_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001534:	f000 f8de 	bl	80016f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001538:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800153c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800153e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001542:	4619      	mov	r1, r3
 8001544:	481c      	ldr	r0, [pc, #112]	@ (80015b8 <MX_TIM4_Init+0xe4>)
 8001546:	f002 fa75 	bl	8003a34 <HAL_TIM_ConfigClockSource>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001550:	f000 f8d0 	bl	80016f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001554:	4818      	ldr	r0, [pc, #96]	@ (80015b8 <MX_TIM4_Init+0xe4>)
 8001556:	f001 ff3e 	bl	80033d6 <HAL_TIM_PWM_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001560:	f000 f8c8 	bl	80016f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800156c:	f107 0320 	add.w	r3, r7, #32
 8001570:	4619      	mov	r1, r3
 8001572:	4811      	ldr	r0, [pc, #68]	@ (80015b8 <MX_TIM4_Init+0xe4>)
 8001574:	f002 fe6a 	bl	800424c <HAL_TIMEx_MasterConfigSynchronization>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800157e:	f000 f8b9 	bl	80016f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001582:	2360      	movs	r3, #96	@ 0x60
 8001584:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2200      	movs	r2, #0
 8001596:	4619      	mov	r1, r3
 8001598:	4807      	ldr	r0, [pc, #28]	@ (80015b8 <MX_TIM4_Init+0xe4>)
 800159a:	f002 f989 	bl	80038b0 <HAL_TIM_PWM_ConfigChannel>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80015a4:	f000 f8a6 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015a8:	4803      	ldr	r0, [pc, #12]	@ (80015b8 <MX_TIM4_Init+0xe4>)
 80015aa:	f000 f939 	bl	8001820 <HAL_TIM_MspPostInit>

}
 80015ae:	bf00      	nop
 80015b0:	3738      	adds	r7, #56	@ 0x38
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	2000011c 	.word	0x2000011c
 80015bc:	40000800 	.word	0x40000800

080015c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015c4:	4b11      	ldr	r3, [pc, #68]	@ (800160c <MX_USART2_UART_Init+0x4c>)
 80015c6:	4a12      	ldr	r2, [pc, #72]	@ (8001610 <MX_USART2_UART_Init+0x50>)
 80015c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ca:	4b10      	ldr	r3, [pc, #64]	@ (800160c <MX_USART2_UART_Init+0x4c>)
 80015cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <MX_USART2_UART_Init+0x4c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <MX_USART2_UART_Init+0x4c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015de:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <MX_USART2_UART_Init+0x4c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015e4:	4b09      	ldr	r3, [pc, #36]	@ (800160c <MX_USART2_UART_Init+0x4c>)
 80015e6:	220c      	movs	r2, #12
 80015e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ea:	4b08      	ldr	r3, [pc, #32]	@ (800160c <MX_USART2_UART_Init+0x4c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f0:	4b06      	ldr	r3, [pc, #24]	@ (800160c <MX_USART2_UART_Init+0x4c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015f6:	4805      	ldr	r0, [pc, #20]	@ (800160c <MX_USART2_UART_Init+0x4c>)
 80015f8:	f002 feb8 	bl	800436c <HAL_UART_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001602:	f000 f877 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000164 	.word	0x20000164
 8001610:	40004400 	.word	0x40004400

08001614 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <MX_DMA_Init+0x3c>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	4a0b      	ldr	r2, [pc, #44]	@ (8001650 <MX_DMA_Init+0x3c>)
 8001624:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001628:	6313      	str	r3, [r2, #48]	@ 0x30
 800162a:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <MX_DMA_Init+0x3c>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	2010      	movs	r0, #16
 800163c:	f000 fbbd 	bl	8001dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001640:	2010      	movs	r0, #16
 8001642:	f000 fbd6 	bl	8001df2 <HAL_NVIC_EnableIRQ>

}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800

08001654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <MX_GPIO_Init+0x98>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a1e      	ldr	r2, [pc, #120]	@ (80016ec <MX_GPIO_Init+0x98>)
 8001674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b1c      	ldr	r3, [pc, #112]	@ (80016ec <MX_GPIO_Init+0x98>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	4b18      	ldr	r3, [pc, #96]	@ (80016ec <MX_GPIO_Init+0x98>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	4a17      	ldr	r2, [pc, #92]	@ (80016ec <MX_GPIO_Init+0x98>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	@ 0x30
 8001696:	4b15      	ldr	r3, [pc, #84]	@ (80016ec <MX_GPIO_Init+0x98>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <MX_GPIO_Init+0x98>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a10      	ldr	r2, [pc, #64]	@ (80016ec <MX_GPIO_Init+0x98>)
 80016ac:	f043 0308 	orr.w	r3, r3, #8
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <MX_GPIO_Init+0x98>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AddrLED_GPIO_Port, AddrLED_Pin, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	2110      	movs	r1, #16
 80016c2:	480b      	ldr	r0, [pc, #44]	@ (80016f0 <MX_GPIO_Init+0x9c>)
 80016c4:	f001 f8bc 	bl	8002840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AddrLED_Pin */
  GPIO_InitStruct.Pin = AddrLED_Pin;
 80016c8:	2310      	movs	r3, #16
 80016ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016cc:	2301      	movs	r3, #1
 80016ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AddrLED_GPIO_Port, &GPIO_InitStruct);
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	4619      	mov	r1, r3
 80016de:	4804      	ldr	r0, [pc, #16]	@ (80016f0 <MX_GPIO_Init+0x9c>)
 80016e0:	f000 ff12 	bl	8002508 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016e4:	bf00      	nop
 80016e6:	3720      	adds	r7, #32
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020000 	.word	0x40020000

080016f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f8:	b672      	cpsid	i
}
 80016fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
 80016fc:	2201      	movs	r2, #1
 80016fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001702:	4809      	ldr	r0, [pc, #36]	@ (8001728 <Error_Handler+0x34>)
 8001704:	f001 f89c 	bl	8002840 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001708:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800170c:	f000 fa56 	bl	8001bbc <HAL_Delay>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001716:	4804      	ldr	r0, [pc, #16]	@ (8001728 <Error_Handler+0x34>)
 8001718:	f001 f892 	bl	8002840 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800171c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001720:	f000 fa4c 	bl	8001bbc <HAL_Delay>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, 1);
 8001724:	bf00      	nop
 8001726:	e7e9      	b.n	80016fc <Error_Handler+0x8>
 8001728:	40020c00 	.word	0x40020c00

0800172c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	4b10      	ldr	r3, [pc, #64]	@ (8001778 <HAL_MspInit+0x4c>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173a:	4a0f      	ldr	r2, [pc, #60]	@ (8001778 <HAL_MspInit+0x4c>)
 800173c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001740:	6453      	str	r3, [r2, #68]	@ 0x44
 8001742:	4b0d      	ldr	r3, [pc, #52]	@ (8001778 <HAL_MspInit+0x4c>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001746:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	603b      	str	r3, [r7, #0]
 8001752:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <HAL_MspInit+0x4c>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	4a08      	ldr	r2, [pc, #32]	@ (8001778 <HAL_MspInit+0x4c>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800175c:	6413      	str	r3, [r2, #64]	@ 0x40
 800175e:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <HAL_MspInit+0x4c>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800

0800177c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800178c:	d10e      	bne.n	80017ac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	4b20      	ldr	r3, [pc, #128]	@ (8001814 <HAL_TIM_Base_MspInit+0x98>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	4a1f      	ldr	r2, [pc, #124]	@ (8001814 <HAL_TIM_Base_MspInit+0x98>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6413      	str	r3, [r2, #64]	@ 0x40
 800179e:	4b1d      	ldr	r3, [pc, #116]	@ (8001814 <HAL_TIM_Base_MspInit+0x98>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017aa:	e02e      	b.n	800180a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a19      	ldr	r2, [pc, #100]	@ (8001818 <HAL_TIM_Base_MspInit+0x9c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d116      	bne.n	80017e4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	4b16      	ldr	r3, [pc, #88]	@ (8001814 <HAL_TIM_Base_MspInit+0x98>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	4a15      	ldr	r2, [pc, #84]	@ (8001814 <HAL_TIM_Base_MspInit+0x98>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017c6:	4b13      	ldr	r3, [pc, #76]	@ (8001814 <HAL_TIM_Base_MspInit+0x98>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	201d      	movs	r0, #29
 80017d8:	f000 faef 	bl	8001dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017dc:	201d      	movs	r0, #29
 80017de:	f000 fb08 	bl	8001df2 <HAL_NVIC_EnableIRQ>
}
 80017e2:	e012      	b.n	800180a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0c      	ldr	r2, [pc, #48]	@ (800181c <HAL_TIM_Base_MspInit+0xa0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d10d      	bne.n	800180a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <HAL_TIM_Base_MspInit+0x98>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	4a07      	ldr	r2, [pc, #28]	@ (8001814 <HAL_TIM_Base_MspInit+0x98>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017fe:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <HAL_TIM_Base_MspInit+0x98>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40000400 	.word	0x40000400
 800181c:	40000800 	.word	0x40000800

08001820 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	@ 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001840:	d11e      	bne.n	8001880 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b22      	ldr	r3, [pc, #136]	@ (80018d0 <HAL_TIM_MspPostInit+0xb0>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a21      	ldr	r2, [pc, #132]	@ (80018d0 <HAL_TIM_MspPostInit+0xb0>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b1f      	ldr	r3, [pc, #124]	@ (80018d0 <HAL_TIM_MspPostInit+0xb0>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVO_Pin;
 800185e:	2320      	movs	r3, #32
 8001860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800186e:	2301      	movs	r3, #1
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	4816      	ldr	r0, [pc, #88]	@ (80018d4 <HAL_TIM_MspPostInit+0xb4>)
 800187a:	f000 fe45 	bl	8002508 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800187e:	e023      	b.n	80018c8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a14      	ldr	r2, [pc, #80]	@ (80018d8 <HAL_TIM_MspPostInit+0xb8>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d11e      	bne.n	80018c8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <HAL_TIM_MspPostInit+0xb0>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a0f      	ldr	r2, [pc, #60]	@ (80018d0 <HAL_TIM_MspPostInit+0xb0>)
 8001894:	f043 0308 	orr.w	r3, r3, #8
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b0d      	ldr	r3, [pc, #52]	@ (80018d0 <HAL_TIM_MspPostInit+0xb0>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LD4_Pin;
 80018a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018b8:	2302      	movs	r3, #2
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	4806      	ldr	r0, [pc, #24]	@ (80018dc <HAL_TIM_MspPostInit+0xbc>)
 80018c4:	f000 fe20 	bl	8002508 <HAL_GPIO_Init>
}
 80018c8:	bf00      	nop
 80018ca:	3728      	adds	r7, #40	@ 0x28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40020000 	.word	0x40020000
 80018d8:	40000800 	.word	0x40000800
 80018dc:	40020c00 	.word	0x40020c00

080018e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	@ 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a31      	ldr	r2, [pc, #196]	@ (80019c4 <HAL_UART_MspInit+0xe4>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d15b      	bne.n	80019ba <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	4b30      	ldr	r3, [pc, #192]	@ (80019c8 <HAL_UART_MspInit+0xe8>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	4a2f      	ldr	r2, [pc, #188]	@ (80019c8 <HAL_UART_MspInit+0xe8>)
 800190c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001910:	6413      	str	r3, [r2, #64]	@ 0x40
 8001912:	4b2d      	ldr	r3, [pc, #180]	@ (80019c8 <HAL_UART_MspInit+0xe8>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b29      	ldr	r3, [pc, #164]	@ (80019c8 <HAL_UART_MspInit+0xe8>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	4a28      	ldr	r2, [pc, #160]	@ (80019c8 <HAL_UART_MspInit+0xe8>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6313      	str	r3, [r2, #48]	@ 0x30
 800192e:	4b26      	ldr	r3, [pc, #152]	@ (80019c8 <HAL_UART_MspInit+0xe8>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800193a:	230c      	movs	r3, #12
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001946:	2303      	movs	r3, #3
 8001948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800194a:	2307      	movs	r3, #7
 800194c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	481d      	ldr	r0, [pc, #116]	@ (80019cc <HAL_UART_MspInit+0xec>)
 8001956:	f000 fdd7 	bl	8002508 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800195a:	4b1d      	ldr	r3, [pc, #116]	@ (80019d0 <HAL_UART_MspInit+0xf0>)
 800195c:	4a1d      	ldr	r2, [pc, #116]	@ (80019d4 <HAL_UART_MspInit+0xf4>)
 800195e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001960:	4b1b      	ldr	r3, [pc, #108]	@ (80019d0 <HAL_UART_MspInit+0xf0>)
 8001962:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001966:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001968:	4b19      	ldr	r3, [pc, #100]	@ (80019d0 <HAL_UART_MspInit+0xf0>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800196e:	4b18      	ldr	r3, [pc, #96]	@ (80019d0 <HAL_UART_MspInit+0xf0>)
 8001970:	2200      	movs	r2, #0
 8001972:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001974:	4b16      	ldr	r3, [pc, #88]	@ (80019d0 <HAL_UART_MspInit+0xf0>)
 8001976:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800197a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800197c:	4b14      	ldr	r3, [pc, #80]	@ (80019d0 <HAL_UART_MspInit+0xf0>)
 800197e:	2200      	movs	r2, #0
 8001980:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001982:	4b13      	ldr	r3, [pc, #76]	@ (80019d0 <HAL_UART_MspInit+0xf0>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <HAL_UART_MspInit+0xf0>)
 800198a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800198e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001990:	4b0f      	ldr	r3, [pc, #60]	@ (80019d0 <HAL_UART_MspInit+0xf0>)
 8001992:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001996:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001998:	4b0d      	ldr	r3, [pc, #52]	@ (80019d0 <HAL_UART_MspInit+0xf0>)
 800199a:	2200      	movs	r2, #0
 800199c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800199e:	480c      	ldr	r0, [pc, #48]	@ (80019d0 <HAL_UART_MspInit+0xf0>)
 80019a0:	f000 fa42 	bl	8001e28 <HAL_DMA_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80019aa:	f7ff fea3 	bl	80016f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a07      	ldr	r2, [pc, #28]	@ (80019d0 <HAL_UART_MspInit+0xf0>)
 80019b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019b4:	4a06      	ldr	r2, [pc, #24]	@ (80019d0 <HAL_UART_MspInit+0xf0>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80019ba:	bf00      	nop
 80019bc:	3728      	adds	r7, #40	@ 0x28
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40004400 	.word	0x40004400
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40020000 	.word	0x40020000
 80019d0:	200001ac 	.word	0x200001ac
 80019d4:	40026088 	.word	0x40026088

080019d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <NMI_Handler+0x4>

080019e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <HardFault_Handler+0x4>

080019e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <MemManage_Handler+0x4>

080019f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <BusFault_Handler+0x4>

080019f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <UsageFault_Handler+0x4>

08001a00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a2e:	f000 f8a5 	bl	8001b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001a3c:	4802      	ldr	r0, [pc, #8]	@ (8001a48 <DMA1_Stream5_IRQHandler+0x10>)
 8001a3e:	f000 faf9 	bl	8002034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200001ac 	.word	0x200001ac

08001a4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a50:	4802      	ldr	r0, [pc, #8]	@ (8001a5c <TIM3_IRQHandler+0x10>)
 8001a52:	f001 fde1 	bl	8003618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200000d4 	.word	0x200000d4

08001a60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <SystemInit+0x20>)
 8001a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a6a:	4a05      	ldr	r2, [pc, #20]	@ (8001a80 <SystemInit+0x20>)
 8001a6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001abc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a88:	f7ff ffea 	bl	8001a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a8c:	480c      	ldr	r0, [pc, #48]	@ (8001ac0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a8e:	490d      	ldr	r1, [pc, #52]	@ (8001ac4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a90:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a94:	e002      	b.n	8001a9c <LoopCopyDataInit>

08001a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9a:	3304      	adds	r3, #4

08001a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa0:	d3f9      	bcc.n	8001a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001acc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aa4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ad0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa8:	e001      	b.n	8001aae <LoopFillZerobss>

08001aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aac:	3204      	adds	r2, #4

08001aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab0:	d3fb      	bcc.n	8001aaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f003 f997 	bl	8004de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ab6:	f7ff fb91 	bl	80011dc <main>
  bx  lr    
 8001aba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001abc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ac8:	08005d68 	.word	0x08005d68
  ldr r2, =_sbss
 8001acc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ad0:	2000046c 	.word	0x2000046c

08001ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC_IRQHandler>
	...

08001ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001adc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <HAL_Init+0x40>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8001b18 <HAL_Init+0x40>)
 8001ae2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ae6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b18 <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0a      	ldr	r2, [pc, #40]	@ (8001b18 <HAL_Init+0x40>)
 8001aee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af4:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <HAL_Init+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a07      	ldr	r2, [pc, #28]	@ (8001b18 <HAL_Init+0x40>)
 8001afa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b00:	2003      	movs	r0, #3
 8001b02:	f000 f94f 	bl	8001da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b06:	200f      	movs	r0, #15
 8001b08:	f000 f808 	bl	8001b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b0c:	f7ff fe0e 	bl	800172c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023c00 	.word	0x40023c00

08001b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b24:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <HAL_InitTick+0x54>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <HAL_InitTick+0x58>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f967 	bl	8001e0e <HAL_SYSTICK_Config>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00e      	b.n	8001b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b0f      	cmp	r3, #15
 8001b4e:	d80a      	bhi.n	8001b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b50:	2200      	movs	r2, #0
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f000 f92f 	bl	8001dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b5c:	4a06      	ldr	r2, [pc, #24]	@ (8001b78 <HAL_InitTick+0x5c>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e000      	b.n	8001b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000004 	.word	0x20000004
 8001b74:	2000000c 	.word	0x2000000c
 8001b78:	20000008 	.word	0x20000008

08001b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b80:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_IncTick+0x20>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <HAL_IncTick+0x24>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ba0 <HAL_IncTick+0x24>)
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	2000000c 	.word	0x2000000c
 8001ba0:	20000330 	.word	0x20000330

08001ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	@ (8001bb8 <HAL_GetTick+0x14>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000330 	.word	0x20000330

08001bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc4:	f7ff ffee 	bl	8001ba4 <HAL_GetTick>
 8001bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd4:	d005      	beq.n	8001be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c00 <HAL_Delay+0x44>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001be2:	bf00      	nop
 8001be4:	f7ff ffde 	bl	8001ba4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d8f7      	bhi.n	8001be4 <HAL_Delay+0x28>
  {
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	2000000c 	.word	0x2000000c

08001c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c14:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c20:	4013      	ands	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c36:	4a04      	ldr	r2, [pc, #16]	@ (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	60d3      	str	r3, [r2, #12]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c50:	4b04      	ldr	r3, [pc, #16]	@ (8001c64 <__NVIC_GetPriorityGrouping+0x18>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	f003 0307 	and.w	r3, r3, #7
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	db0b      	blt.n	8001c92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	f003 021f 	and.w	r2, r3, #31
 8001c80:	4907      	ldr	r1, [pc, #28]	@ (8001ca0 <__NVIC_EnableIRQ+0x38>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	095b      	lsrs	r3, r3, #5
 8001c88:	2001      	movs	r0, #1
 8001c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000e100 	.word	0xe000e100

08001ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	db0a      	blt.n	8001cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	490c      	ldr	r1, [pc, #48]	@ (8001cf0 <__NVIC_SetPriority+0x4c>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	0112      	lsls	r2, r2, #4
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ccc:	e00a      	b.n	8001ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4908      	ldr	r1, [pc, #32]	@ (8001cf4 <__NVIC_SetPriority+0x50>)
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	3b04      	subs	r3, #4
 8001cdc:	0112      	lsls	r2, r2, #4
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	761a      	strb	r2, [r3, #24]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000e100 	.word	0xe000e100
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	@ 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f1c3 0307 	rsb	r3, r3, #7
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	bf28      	it	cs
 8001d16:	2304      	movcs	r3, #4
 8001d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d902      	bls.n	8001d28 <NVIC_EncodePriority+0x30>
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3b03      	subs	r3, #3
 8001d26:	e000      	b.n	8001d2a <NVIC_EncodePriority+0x32>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43da      	mvns	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d40:	f04f 31ff 	mov.w	r1, #4294967295
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	43d9      	mvns	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	4313      	orrs	r3, r2
         );
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3724      	adds	r7, #36	@ 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d70:	d301      	bcc.n	8001d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00f      	b.n	8001d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d76:	4a0a      	ldr	r2, [pc, #40]	@ (8001da0 <SysTick_Config+0x40>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d7e:	210f      	movs	r1, #15
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295
 8001d84:	f7ff ff8e 	bl	8001ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d88:	4b05      	ldr	r3, [pc, #20]	@ (8001da0 <SysTick_Config+0x40>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8e:	4b04      	ldr	r3, [pc, #16]	@ (8001da0 <SysTick_Config+0x40>)
 8001d90:	2207      	movs	r2, #7
 8001d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	e000e010 	.word	0xe000e010

08001da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff29 	bl	8001c04 <__NVIC_SetPriorityGrouping>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dcc:	f7ff ff3e 	bl	8001c4c <__NVIC_GetPriorityGrouping>
 8001dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	6978      	ldr	r0, [r7, #20]
 8001dd8:	f7ff ff8e 	bl	8001cf8 <NVIC_EncodePriority>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff5d 	bl	8001ca4 <__NVIC_SetPriority>
}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff31 	bl	8001c68 <__NVIC_EnableIRQ>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff ffa2 	bl	8001d60 <SysTick_Config>
 8001e1c:	4603      	mov	r3, r0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e34:	f7ff feb6 	bl	8001ba4 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e099      	b.n	8001f78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0201 	bic.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e64:	e00f      	b.n	8001e86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e66:	f7ff fe9d 	bl	8001ba4 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b05      	cmp	r3, #5
 8001e72:	d908      	bls.n	8001e86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2220      	movs	r2, #32
 8001e78:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e078      	b.n	8001f78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1e8      	bne.n	8001e66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	4b38      	ldr	r3, [pc, #224]	@ (8001f80 <HAL_DMA_Init+0x158>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ebe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d107      	bne.n	8001ef0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f023 0307 	bic.w	r3, r3, #7
 8001f06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	d117      	bne.n	8001f4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00e      	beq.n	8001f4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fa6f 	bl	8002410 <DMA_CheckFifoParam>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2240      	movs	r2, #64	@ 0x40
 8001f3c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f46:	2301      	movs	r3, #1
 8001f48:	e016      	b.n	8001f78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 fa26 	bl	80023a4 <DMA_CalcBaseAndBitshift>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f60:	223f      	movs	r2, #63	@ 0x3f
 8001f62:	409a      	lsls	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	f010803f 	.word	0xf010803f

08001f84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_DMA_Start_IT+0x26>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e040      	b.n	800202c <HAL_DMA_Start_IT+0xa8>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d12f      	bne.n	800201e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 f9b8 	bl	8002348 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fdc:	223f      	movs	r2, #63	@ 0x3f
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0216 	orr.w	r2, r2, #22
 8001ff2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d007      	beq.n	800200c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0208 	orr.w	r2, r2, #8
 800200a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	e005      	b.n	800202a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002026:	2302      	movs	r3, #2
 8002028:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800202a:	7dfb      	ldrb	r3, [r7, #23]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800203c:	2300      	movs	r3, #0
 800203e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002040:	4b8e      	ldr	r3, [pc, #568]	@ (800227c <HAL_DMA_IRQHandler+0x248>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a8e      	ldr	r2, [pc, #568]	@ (8002280 <HAL_DMA_IRQHandler+0x24c>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	0a9b      	lsrs	r3, r3, #10
 800204c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002052:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205e:	2208      	movs	r2, #8
 8002060:	409a      	lsls	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4013      	ands	r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d01a      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d013      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0204 	bic.w	r2, r2, #4
 8002086:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800208c:	2208      	movs	r2, #8
 800208e:	409a      	lsls	r2, r3
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002098:	f043 0201 	orr.w	r2, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a4:	2201      	movs	r2, #1
 80020a6:	409a      	lsls	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d012      	beq.n	80020d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00b      	beq.n	80020d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c2:	2201      	movs	r2, #1
 80020c4:	409a      	lsls	r2, r3
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ce:	f043 0202 	orr.w	r2, r3, #2
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020da:	2204      	movs	r2, #4
 80020dc:	409a      	lsls	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d012      	beq.n	800210c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00b      	beq.n	800210c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f8:	2204      	movs	r2, #4
 80020fa:	409a      	lsls	r2, r3
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002104:	f043 0204 	orr.w	r2, r3, #4
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002110:	2210      	movs	r2, #16
 8002112:	409a      	lsls	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d043      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b00      	cmp	r3, #0
 8002128:	d03c      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800212e:	2210      	movs	r2, #16
 8002130:	409a      	lsls	r2, r3
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d018      	beq.n	8002176 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d108      	bne.n	8002164 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002156:	2b00      	cmp	r3, #0
 8002158:	d024      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	4798      	blx	r3
 8002162:	e01f      	b.n	80021a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01b      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	4798      	blx	r3
 8002174:	e016      	b.n	80021a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d107      	bne.n	8002194 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0208 	bic.w	r2, r2, #8
 8002192:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a8:	2220      	movs	r2, #32
 80021aa:	409a      	lsls	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 808f 	beq.w	80022d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 8087 	beq.w	80022d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ca:	2220      	movs	r2, #32
 80021cc:	409a      	lsls	r2, r3
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b05      	cmp	r3, #5
 80021dc:	d136      	bne.n	800224c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0216 	bic.w	r2, r2, #22
 80021ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695a      	ldr	r2, [r3, #20]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002202:	2b00      	cmp	r3, #0
 8002204:	d103      	bne.n	800220e <HAL_DMA_IRQHandler+0x1da>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800220a:	2b00      	cmp	r3, #0
 800220c:	d007      	beq.n	800221e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0208 	bic.w	r2, r2, #8
 800221c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002222:	223f      	movs	r2, #63	@ 0x3f
 8002224:	409a      	lsls	r2, r3
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800223e:	2b00      	cmp	r3, #0
 8002240:	d07e      	beq.n	8002340 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	4798      	blx	r3
        }
        return;
 800224a:	e079      	b.n	8002340 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d01d      	beq.n	8002296 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10d      	bne.n	8002284 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226c:	2b00      	cmp	r3, #0
 800226e:	d031      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	4798      	blx	r3
 8002278:	e02c      	b.n	80022d4 <HAL_DMA_IRQHandler+0x2a0>
 800227a:	bf00      	nop
 800227c:	20000004 	.word	0x20000004
 8002280:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002288:	2b00      	cmp	r3, #0
 800228a:	d023      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	4798      	blx	r3
 8002294:	e01e      	b.n	80022d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10f      	bne.n	80022c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0210 	bic.w	r2, r2, #16
 80022b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d032      	beq.n	8002342 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d022      	beq.n	800232e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2205      	movs	r2, #5
 80022ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0201 	bic.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	3301      	adds	r3, #1
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	429a      	cmp	r2, r3
 800230a:	d307      	bcc.n	800231c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f2      	bne.n	8002300 <HAL_DMA_IRQHandler+0x2cc>
 800231a:	e000      	b.n	800231e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800231c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002332:	2b00      	cmp	r3, #0
 8002334:	d005      	beq.n	8002342 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	4798      	blx	r3
 800233e:	e000      	b.n	8002342 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002340:	bf00      	nop
    }
  }
}
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002364:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b40      	cmp	r3, #64	@ 0x40
 8002374:	d108      	bne.n	8002388 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002386:	e007      	b.n	8002398 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	60da      	str	r2, [r3, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	3b10      	subs	r3, #16
 80023b4:	4a14      	ldr	r2, [pc, #80]	@ (8002408 <DMA_CalcBaseAndBitshift+0x64>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	091b      	lsrs	r3, r3, #4
 80023bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023be:	4a13      	ldr	r2, [pc, #76]	@ (800240c <DMA_CalcBaseAndBitshift+0x68>)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4413      	add	r3, r2
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d909      	bls.n	80023e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023da:	f023 0303 	bic.w	r3, r3, #3
 80023de:	1d1a      	adds	r2, r3, #4
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80023e4:	e007      	b.n	80023f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80023ee:	f023 0303 	bic.w	r3, r3, #3
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	aaaaaaab 	.word	0xaaaaaaab
 800240c:	08005d20 	.word	0x08005d20

08002410 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002418:	2300      	movs	r3, #0
 800241a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002420:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d11f      	bne.n	800246a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d856      	bhi.n	80024de <DMA_CheckFifoParam+0xce>
 8002430:	a201      	add	r2, pc, #4	@ (adr r2, 8002438 <DMA_CheckFifoParam+0x28>)
 8002432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002436:	bf00      	nop
 8002438:	08002449 	.word	0x08002449
 800243c:	0800245b 	.word	0x0800245b
 8002440:	08002449 	.word	0x08002449
 8002444:	080024df 	.word	0x080024df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d046      	beq.n	80024e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002458:	e043      	b.n	80024e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002462:	d140      	bne.n	80024e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002468:	e03d      	b.n	80024e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002472:	d121      	bne.n	80024b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b03      	cmp	r3, #3
 8002478:	d837      	bhi.n	80024ea <DMA_CheckFifoParam+0xda>
 800247a:	a201      	add	r2, pc, #4	@ (adr r2, 8002480 <DMA_CheckFifoParam+0x70>)
 800247c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002480:	08002491 	.word	0x08002491
 8002484:	08002497 	.word	0x08002497
 8002488:	08002491 	.word	0x08002491
 800248c:	080024a9 	.word	0x080024a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
      break;
 8002494:	e030      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d025      	beq.n	80024ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a6:	e022      	b.n	80024ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024b0:	d11f      	bne.n	80024f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024b6:	e01c      	b.n	80024f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d903      	bls.n	80024c6 <DMA_CheckFifoParam+0xb6>
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d003      	beq.n	80024cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024c4:	e018      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
      break;
 80024ca:	e015      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00e      	beq.n	80024f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	73fb      	strb	r3, [r7, #15]
      break;
 80024dc:	e00b      	b.n	80024f6 <DMA_CheckFifoParam+0xe6>
      break;
 80024de:	bf00      	nop
 80024e0:	e00a      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      break;
 80024e2:	bf00      	nop
 80024e4:	e008      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      break;
 80024e6:	bf00      	nop
 80024e8:	e006      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      break;
 80024ea:	bf00      	nop
 80024ec:	e004      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      break;
 80024ee:	bf00      	nop
 80024f0:	e002      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80024f2:	bf00      	nop
 80024f4:	e000      	b.n	80024f8 <DMA_CheckFifoParam+0xe8>
      break;
 80024f6:	bf00      	nop
    }
  } 
  
  return status; 
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop

08002508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	@ 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002516:	2300      	movs	r3, #0
 8002518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	e16b      	b.n	80027fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002524:	2201      	movs	r2, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	429a      	cmp	r2, r3
 800253e:	f040 815a 	bne.w	80027f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d005      	beq.n	800255a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002556:	2b02      	cmp	r3, #2
 8002558:	d130      	bne.n	80025bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2203      	movs	r2, #3
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002590:	2201      	movs	r2, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 0201 	and.w	r2, r3, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d017      	beq.n	80025f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d123      	bne.n	800264c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	08da      	lsrs	r2, r3, #3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3208      	adds	r2, #8
 800260c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	220f      	movs	r2, #15
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	08da      	lsrs	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3208      	adds	r2, #8
 8002646:	69b9      	ldr	r1, [r7, #24]
 8002648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0203 	and.w	r2, r3, #3
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80b4 	beq.w	80027f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	4b60      	ldr	r3, [pc, #384]	@ (8002814 <HAL_GPIO_Init+0x30c>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002696:	4a5f      	ldr	r2, [pc, #380]	@ (8002814 <HAL_GPIO_Init+0x30c>)
 8002698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800269c:	6453      	str	r3, [r2, #68]	@ 0x44
 800269e:	4b5d      	ldr	r3, [pc, #372]	@ (8002814 <HAL_GPIO_Init+0x30c>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026aa:	4a5b      	ldr	r2, [pc, #364]	@ (8002818 <HAL_GPIO_Init+0x310>)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	3302      	adds	r3, #2
 80026b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	220f      	movs	r2, #15
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a52      	ldr	r2, [pc, #328]	@ (800281c <HAL_GPIO_Init+0x314>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d02b      	beq.n	800272e <HAL_GPIO_Init+0x226>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a51      	ldr	r2, [pc, #324]	@ (8002820 <HAL_GPIO_Init+0x318>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d025      	beq.n	800272a <HAL_GPIO_Init+0x222>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a50      	ldr	r2, [pc, #320]	@ (8002824 <HAL_GPIO_Init+0x31c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d01f      	beq.n	8002726 <HAL_GPIO_Init+0x21e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4f      	ldr	r2, [pc, #316]	@ (8002828 <HAL_GPIO_Init+0x320>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d019      	beq.n	8002722 <HAL_GPIO_Init+0x21a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a4e      	ldr	r2, [pc, #312]	@ (800282c <HAL_GPIO_Init+0x324>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d013      	beq.n	800271e <HAL_GPIO_Init+0x216>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4d      	ldr	r2, [pc, #308]	@ (8002830 <HAL_GPIO_Init+0x328>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00d      	beq.n	800271a <HAL_GPIO_Init+0x212>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4c      	ldr	r2, [pc, #304]	@ (8002834 <HAL_GPIO_Init+0x32c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d007      	beq.n	8002716 <HAL_GPIO_Init+0x20e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4b      	ldr	r2, [pc, #300]	@ (8002838 <HAL_GPIO_Init+0x330>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d101      	bne.n	8002712 <HAL_GPIO_Init+0x20a>
 800270e:	2307      	movs	r3, #7
 8002710:	e00e      	b.n	8002730 <HAL_GPIO_Init+0x228>
 8002712:	2308      	movs	r3, #8
 8002714:	e00c      	b.n	8002730 <HAL_GPIO_Init+0x228>
 8002716:	2306      	movs	r3, #6
 8002718:	e00a      	b.n	8002730 <HAL_GPIO_Init+0x228>
 800271a:	2305      	movs	r3, #5
 800271c:	e008      	b.n	8002730 <HAL_GPIO_Init+0x228>
 800271e:	2304      	movs	r3, #4
 8002720:	e006      	b.n	8002730 <HAL_GPIO_Init+0x228>
 8002722:	2303      	movs	r3, #3
 8002724:	e004      	b.n	8002730 <HAL_GPIO_Init+0x228>
 8002726:	2302      	movs	r3, #2
 8002728:	e002      	b.n	8002730 <HAL_GPIO_Init+0x228>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <HAL_GPIO_Init+0x228>
 800272e:	2300      	movs	r3, #0
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	f002 0203 	and.w	r2, r2, #3
 8002736:	0092      	lsls	r2, r2, #2
 8002738:	4093      	lsls	r3, r2
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002740:	4935      	ldr	r1, [pc, #212]	@ (8002818 <HAL_GPIO_Init+0x310>)
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	089b      	lsrs	r3, r3, #2
 8002746:	3302      	adds	r3, #2
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800274e:	4b3b      	ldr	r3, [pc, #236]	@ (800283c <HAL_GPIO_Init+0x334>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	43db      	mvns	r3, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4013      	ands	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002772:	4a32      	ldr	r2, [pc, #200]	@ (800283c <HAL_GPIO_Init+0x334>)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002778:	4b30      	ldr	r3, [pc, #192]	@ (800283c <HAL_GPIO_Init+0x334>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800279c:	4a27      	ldr	r2, [pc, #156]	@ (800283c <HAL_GPIO_Init+0x334>)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027a2:	4b26      	ldr	r3, [pc, #152]	@ (800283c <HAL_GPIO_Init+0x334>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027c6:	4a1d      	ldr	r2, [pc, #116]	@ (800283c <HAL_GPIO_Init+0x334>)
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027cc:	4b1b      	ldr	r3, [pc, #108]	@ (800283c <HAL_GPIO_Init+0x334>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027f0:	4a12      	ldr	r2, [pc, #72]	@ (800283c <HAL_GPIO_Init+0x334>)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3301      	adds	r3, #1
 80027fa:	61fb      	str	r3, [r7, #28]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	2b0f      	cmp	r3, #15
 8002800:	f67f ae90 	bls.w	8002524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	3724      	adds	r7, #36	@ 0x24
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800
 8002818:	40013800 	.word	0x40013800
 800281c:	40020000 	.word	0x40020000
 8002820:	40020400 	.word	0x40020400
 8002824:	40020800 	.word	0x40020800
 8002828:	40020c00 	.word	0x40020c00
 800282c:	40021000 	.word	0x40021000
 8002830:	40021400 	.word	0x40021400
 8002834:	40021800 	.word	0x40021800
 8002838:	40021c00 	.word	0x40021c00
 800283c:	40013c00 	.word	0x40013c00

08002840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	807b      	strh	r3, [r7, #2]
 800284c:	4613      	mov	r3, r2
 800284e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002850:	787b      	ldrb	r3, [r7, #1]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002856:	887a      	ldrh	r2, [r7, #2]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800285c:	e003      	b.n	8002866 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800285e:	887b      	ldrh	r3, [r7, #2]
 8002860:	041a      	lsls	r2, r3, #16
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	619a      	str	r2, [r3, #24]
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e267      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d075      	beq.n	800297e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002892:	4b88      	ldr	r3, [pc, #544]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b04      	cmp	r3, #4
 800289c:	d00c      	beq.n	80028b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289e:	4b85      	ldr	r3, [pc, #532]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d112      	bne.n	80028d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028aa:	4b82      	ldr	r3, [pc, #520]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028b6:	d10b      	bne.n	80028d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b8:	4b7e      	ldr	r3, [pc, #504]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d05b      	beq.n	800297c <HAL_RCC_OscConfig+0x108>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d157      	bne.n	800297c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e242      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028d8:	d106      	bne.n	80028e8 <HAL_RCC_OscConfig+0x74>
 80028da:	4b76      	ldr	r3, [pc, #472]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a75      	ldr	r2, [pc, #468]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e01d      	b.n	8002924 <HAL_RCC_OscConfig+0xb0>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0x98>
 80028f2:	4b70      	ldr	r3, [pc, #448]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a6f      	ldr	r2, [pc, #444]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80028f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b6d      	ldr	r3, [pc, #436]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a6c      	ldr	r2, [pc, #432]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e00b      	b.n	8002924 <HAL_RCC_OscConfig+0xb0>
 800290c:	4b69      	ldr	r3, [pc, #420]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a68      	ldr	r2, [pc, #416]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002912:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	4b66      	ldr	r3, [pc, #408]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a65      	ldr	r2, [pc, #404]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800291e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d013      	beq.n	8002954 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7ff f93a 	bl	8001ba4 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002934:	f7ff f936 	bl	8001ba4 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	@ 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e207      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	4b5b      	ldr	r3, [pc, #364]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0xc0>
 8002952:	e014      	b.n	800297e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7ff f926 	bl	8001ba4 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800295c:	f7ff f922 	bl	8001ba4 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	@ 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e1f3      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296e:	4b51      	ldr	r3, [pc, #324]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0xe8>
 800297a:	e000      	b.n	800297e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d063      	beq.n	8002a52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800298a:	4b4a      	ldr	r3, [pc, #296]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00b      	beq.n	80029ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002996:	4b47      	ldr	r3, [pc, #284]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d11c      	bne.n	80029dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a2:	4b44      	ldr	r3, [pc, #272]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d116      	bne.n	80029dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ae:	4b41      	ldr	r3, [pc, #260]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <HAL_RCC_OscConfig+0x152>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d001      	beq.n	80029c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e1c7      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4937      	ldr	r1, [pc, #220]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029da:	e03a      	b.n	8002a52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d020      	beq.n	8002a26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e4:	4b34      	ldr	r3, [pc, #208]	@ (8002ab8 <HAL_RCC_OscConfig+0x244>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7ff f8db 	bl	8001ba4 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f2:	f7ff f8d7 	bl	8001ba4 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e1a8      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a04:	4b2b      	ldr	r3, [pc, #172]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a10:	4b28      	ldr	r3, [pc, #160]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4925      	ldr	r1, [pc, #148]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	600b      	str	r3, [r1, #0]
 8002a24:	e015      	b.n	8002a52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a26:	4b24      	ldr	r3, [pc, #144]	@ (8002ab8 <HAL_RCC_OscConfig+0x244>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7ff f8ba 	bl	8001ba4 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a34:	f7ff f8b6 	bl	8001ba4 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e187      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a46:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d036      	beq.n	8002acc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d016      	beq.n	8002a94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a66:	4b15      	ldr	r3, [pc, #84]	@ (8002abc <HAL_RCC_OscConfig+0x248>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7ff f89a 	bl	8001ba4 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a74:	f7ff f896 	bl	8001ba4 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e167      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a86:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab4 <HAL_RCC_OscConfig+0x240>)
 8002a88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0x200>
 8002a92:	e01b      	b.n	8002acc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a94:	4b09      	ldr	r3, [pc, #36]	@ (8002abc <HAL_RCC_OscConfig+0x248>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9a:	f7ff f883 	bl	8001ba4 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa0:	e00e      	b.n	8002ac0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa2:	f7ff f87f 	bl	8001ba4 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d907      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e150      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	42470000 	.word	0x42470000
 8002abc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac0:	4b88      	ldr	r3, [pc, #544]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1ea      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8097 	beq.w	8002c08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ada:	2300      	movs	r3, #0
 8002adc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ade:	4b81      	ldr	r3, [pc, #516]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10f      	bne.n	8002b0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	4b7d      	ldr	r3, [pc, #500]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	4a7c      	ldr	r2, [pc, #496]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002afa:	4b7a      	ldr	r3, [pc, #488]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b06:	2301      	movs	r3, #1
 8002b08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0a:	4b77      	ldr	r3, [pc, #476]	@ (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d118      	bne.n	8002b48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b16:	4b74      	ldr	r3, [pc, #464]	@ (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a73      	ldr	r2, [pc, #460]	@ (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b22:	f7ff f83f 	bl	8001ba4 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2a:	f7ff f83b 	bl	8001ba4 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e10c      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3c:	4b6a      	ldr	r3, [pc, #424]	@ (8002ce8 <HAL_RCC_OscConfig+0x474>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d106      	bne.n	8002b5e <HAL_RCC_OscConfig+0x2ea>
 8002b50:	4b64      	ldr	r3, [pc, #400]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b54:	4a63      	ldr	r2, [pc, #396]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b5c:	e01c      	b.n	8002b98 <HAL_RCC_OscConfig+0x324>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b05      	cmp	r3, #5
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCC_OscConfig+0x30c>
 8002b66:	4b5f      	ldr	r3, [pc, #380]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6a:	4a5e      	ldr	r2, [pc, #376]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	f043 0304 	orr.w	r3, r3, #4
 8002b70:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b72:	4b5c      	ldr	r3, [pc, #368]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b76:	4a5b      	ldr	r2, [pc, #364]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b7e:	e00b      	b.n	8002b98 <HAL_RCC_OscConfig+0x324>
 8002b80:	4b58      	ldr	r3, [pc, #352]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b84:	4a57      	ldr	r2, [pc, #348]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b86:	f023 0301 	bic.w	r3, r3, #1
 8002b8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b8c:	4b55      	ldr	r3, [pc, #340]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b90:	4a54      	ldr	r2, [pc, #336]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002b92:	f023 0304 	bic.w	r3, r3, #4
 8002b96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d015      	beq.n	8002bcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7ff f800 	bl	8001ba4 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7fe fffc 	bl	8001ba4 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e0cb      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbe:	4b49      	ldr	r3, [pc, #292]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0ee      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x334>
 8002bca:	e014      	b.n	8002bf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bcc:	f7fe ffea 	bl	8001ba4 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd2:	e00a      	b.n	8002bea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd4:	f7fe ffe6 	bl	8001ba4 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e0b5      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bea:	4b3e      	ldr	r3, [pc, #248]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1ee      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d105      	bne.n	8002c08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfc:	4b39      	ldr	r3, [pc, #228]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c00:	4a38      	ldr	r2, [pc, #224]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80a1 	beq.w	8002d54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c12:	4b34      	ldr	r3, [pc, #208]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d05c      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d141      	bne.n	8002caa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c26:	4b31      	ldr	r3, [pc, #196]	@ (8002cec <HAL_RCC_OscConfig+0x478>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7fe ffba 	bl	8001ba4 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c34:	f7fe ffb6 	bl	8001ba4 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e087      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	4b27      	ldr	r3, [pc, #156]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69da      	ldr	r2, [r3, #28]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c60:	019b      	lsls	r3, r3, #6
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c68:	085b      	lsrs	r3, r3, #1
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	041b      	lsls	r3, r3, #16
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c74:	061b      	lsls	r3, r3, #24
 8002c76:	491b      	ldr	r1, [pc, #108]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cec <HAL_RCC_OscConfig+0x478>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c82:	f7fe ff8f 	bl	8001ba4 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8a:	f7fe ff8b 	bl	8001ba4 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e05c      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x416>
 8002ca8:	e054      	b.n	8002d54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002caa:	4b10      	ldr	r3, [pc, #64]	@ (8002cec <HAL_RCC_OscConfig+0x478>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7fe ff78 	bl	8001ba4 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7fe ff74 	bl	8001ba4 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e045      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cca:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x444>
 8002cd6:	e03d      	b.n	8002d54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e038      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	40007000 	.word	0x40007000
 8002cec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d60 <HAL_RCC_OscConfig+0x4ec>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d028      	beq.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d121      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d11a      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d20:	4013      	ands	r3, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d111      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d36:	085b      	lsrs	r3, r3, #1
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800

08002d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e0cc      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d78:	4b68      	ldr	r3, [pc, #416]	@ (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d90c      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d86:	4b65      	ldr	r3, [pc, #404]	@ (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b63      	ldr	r3, [pc, #396]	@ (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0b8      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d020      	beq.n	8002dee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002db8:	4b59      	ldr	r3, [pc, #356]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a58      	ldr	r2, [pc, #352]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002dc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd0:	4b53      	ldr	r3, [pc, #332]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4a52      	ldr	r2, [pc, #328]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ddc:	4b50      	ldr	r3, [pc, #320]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	494d      	ldr	r1, [pc, #308]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d044      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d107      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	4b47      	ldr	r3, [pc, #284]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d119      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e07f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d003      	beq.n	8002e22 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d107      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e22:	4b3f      	ldr	r3, [pc, #252]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e06f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e32:	4b3b      	ldr	r3, [pc, #236]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e067      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e42:	4b37      	ldr	r3, [pc, #220]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f023 0203 	bic.w	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	4934      	ldr	r1, [pc, #208]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e54:	f7fe fea6 	bl	8001ba4 <HAL_GetTick>
 8002e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5a:	e00a      	b.n	8002e72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e5c:	f7fe fea2 	bl	8001ba4 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e04f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e72:	4b2b      	ldr	r3, [pc, #172]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 020c 	and.w	r2, r3, #12
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d1eb      	bne.n	8002e5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e84:	4b25      	ldr	r3, [pc, #148]	@ (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d20c      	bcs.n	8002eac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e92:	4b22      	ldr	r3, [pc, #136]	@ (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b20      	ldr	r3, [pc, #128]	@ (8002f1c <HAL_RCC_ClockConfig+0x1b8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e032      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb8:	4b19      	ldr	r3, [pc, #100]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4916      	ldr	r1, [pc, #88]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ed6:	4b12      	ldr	r3, [pc, #72]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	490e      	ldr	r1, [pc, #56]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eea:	f000 f821 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	490a      	ldr	r1, [pc, #40]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	5ccb      	ldrb	r3, [r1, r3]
 8002efe:	fa22 f303 	lsr.w	r3, r2, r3
 8002f02:	4a09      	ldr	r2, [pc, #36]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f06:	4b09      	ldr	r3, [pc, #36]	@ (8002f2c <HAL_RCC_ClockConfig+0x1c8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fe fe06 	bl	8001b1c <HAL_InitTick>

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023c00 	.word	0x40023c00
 8002f20:	40023800 	.word	0x40023800
 8002f24:	08005d08 	.word	0x08005d08
 8002f28:	20000004 	.word	0x20000004
 8002f2c:	20000008 	.word	0x20000008

08002f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f34:	b094      	sub	sp, #80	@ 0x50
 8002f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f48:	4b79      	ldr	r3, [pc, #484]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d00d      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x40>
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	f200 80e1 	bhi.w	800311c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x34>
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d003      	beq.n	8002f6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f62:	e0db      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f64:	4b73      	ldr	r3, [pc, #460]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f68:	e0db      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f6a:	4b73      	ldr	r3, [pc, #460]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f6e:	e0d8      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f70:	4b6f      	ldr	r3, [pc, #444]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f78:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f7a:	4b6d      	ldr	r3, [pc, #436]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d063      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f86:	4b6a      	ldr	r3, [pc, #424]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	099b      	lsrs	r3, r3, #6
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f90:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f98:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002fa2:	4622      	mov	r2, r4
 8002fa4:	462b      	mov	r3, r5
 8002fa6:	f04f 0000 	mov.w	r0, #0
 8002faa:	f04f 0100 	mov.w	r1, #0
 8002fae:	0159      	lsls	r1, r3, #5
 8002fb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fb4:	0150      	lsls	r0, r2, #5
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4621      	mov	r1, r4
 8002fbc:	1a51      	subs	r1, r2, r1
 8002fbe:	6139      	str	r1, [r7, #16]
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fd4:	4659      	mov	r1, fp
 8002fd6:	018b      	lsls	r3, r1, #6
 8002fd8:	4651      	mov	r1, sl
 8002fda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fde:	4651      	mov	r1, sl
 8002fe0:	018a      	lsls	r2, r1, #6
 8002fe2:	4651      	mov	r1, sl
 8002fe4:	ebb2 0801 	subs.w	r8, r2, r1
 8002fe8:	4659      	mov	r1, fp
 8002fea:	eb63 0901 	sbc.w	r9, r3, r1
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ffa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ffe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003002:	4690      	mov	r8, r2
 8003004:	4699      	mov	r9, r3
 8003006:	4623      	mov	r3, r4
 8003008:	eb18 0303 	adds.w	r3, r8, r3
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	462b      	mov	r3, r5
 8003010:	eb49 0303 	adc.w	r3, r9, r3
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003022:	4629      	mov	r1, r5
 8003024:	024b      	lsls	r3, r1, #9
 8003026:	4621      	mov	r1, r4
 8003028:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800302c:	4621      	mov	r1, r4
 800302e:	024a      	lsls	r2, r1, #9
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003036:	2200      	movs	r2, #0
 8003038:	62bb      	str	r3, [r7, #40]	@ 0x28
 800303a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800303c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003040:	f7fd fd9e 	bl	8000b80 <__aeabi_uldivmod>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4613      	mov	r3, r2
 800304a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800304c:	e058      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800304e:	4b38      	ldr	r3, [pc, #224]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	099b      	lsrs	r3, r3, #6
 8003054:	2200      	movs	r2, #0
 8003056:	4618      	mov	r0, r3
 8003058:	4611      	mov	r1, r2
 800305a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800305e:	623b      	str	r3, [r7, #32]
 8003060:	2300      	movs	r3, #0
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
 8003064:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003068:	4642      	mov	r2, r8
 800306a:	464b      	mov	r3, r9
 800306c:	f04f 0000 	mov.w	r0, #0
 8003070:	f04f 0100 	mov.w	r1, #0
 8003074:	0159      	lsls	r1, r3, #5
 8003076:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800307a:	0150      	lsls	r0, r2, #5
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4641      	mov	r1, r8
 8003082:	ebb2 0a01 	subs.w	sl, r2, r1
 8003086:	4649      	mov	r1, r9
 8003088:	eb63 0b01 	sbc.w	fp, r3, r1
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003098:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800309c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030a0:	ebb2 040a 	subs.w	r4, r2, sl
 80030a4:	eb63 050b 	sbc.w	r5, r3, fp
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	00eb      	lsls	r3, r5, #3
 80030b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030b6:	00e2      	lsls	r2, r4, #3
 80030b8:	4614      	mov	r4, r2
 80030ba:	461d      	mov	r5, r3
 80030bc:	4643      	mov	r3, r8
 80030be:	18e3      	adds	r3, r4, r3
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	464b      	mov	r3, r9
 80030c4:	eb45 0303 	adc.w	r3, r5, r3
 80030c8:	607b      	str	r3, [r7, #4]
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030d6:	4629      	mov	r1, r5
 80030d8:	028b      	lsls	r3, r1, #10
 80030da:	4621      	mov	r1, r4
 80030dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030e0:	4621      	mov	r1, r4
 80030e2:	028a      	lsls	r2, r1, #10
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030ea:	2200      	movs	r2, #0
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	61fa      	str	r2, [r7, #28]
 80030f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030f4:	f7fd fd44 	bl	8000b80 <__aeabi_uldivmod>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4613      	mov	r3, r2
 80030fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003100:	4b0b      	ldr	r3, [pc, #44]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	0c1b      	lsrs	r3, r3, #16
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	3301      	adds	r3, #1
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003110:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003114:	fbb2 f3f3 	udiv	r3, r2, r3
 8003118:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800311a:	e002      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800311c:	4b05      	ldr	r3, [pc, #20]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x204>)
 800311e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003122:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003124:	4618      	mov	r0, r3
 8003126:	3750      	adds	r7, #80	@ 0x50
 8003128:	46bd      	mov	sp, r7
 800312a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800
 8003134:	00f42400 	.word	0x00f42400
 8003138:	007a1200 	.word	0x007a1200

0800313c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003140:	4b03      	ldr	r3, [pc, #12]	@ (8003150 <HAL_RCC_GetHCLKFreq+0x14>)
 8003142:	681b      	ldr	r3, [r3, #0]
}
 8003144:	4618      	mov	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000004 	.word	0x20000004

08003154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003158:	f7ff fff0 	bl	800313c <HAL_RCC_GetHCLKFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	4b05      	ldr	r3, [pc, #20]	@ (8003174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	0a9b      	lsrs	r3, r3, #10
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	4903      	ldr	r1, [pc, #12]	@ (8003178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800316a:	5ccb      	ldrb	r3, [r1, r3]
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40023800 	.word	0x40023800
 8003178:	08005d18 	.word	0x08005d18

0800317c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003180:	f7ff ffdc 	bl	800313c <HAL_RCC_GetHCLKFreq>
 8003184:	4602      	mov	r2, r0
 8003186:	4b05      	ldr	r3, [pc, #20]	@ (800319c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	0b5b      	lsrs	r3, r3, #13
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	4903      	ldr	r1, [pc, #12]	@ (80031a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003192:	5ccb      	ldrb	r3, [r1, r3]
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003198:	4618      	mov	r0, r3
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40023800 	.word	0x40023800
 80031a0:	08005d18 	.word	0x08005d18

080031a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e041      	b.n	800323a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fe fad6 	bl	800177c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3304      	adds	r3, #4
 80031e0:	4619      	mov	r1, r3
 80031e2:	4610      	mov	r0, r2
 80031e4:	f000 fd16 	bl	8003c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b01      	cmp	r3, #1
 8003256:	d001      	beq.n	800325c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e04e      	b.n	80032fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a23      	ldr	r2, [pc, #140]	@ (8003308 <HAL_TIM_Base_Start_IT+0xc4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d022      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x80>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003286:	d01d      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x80>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1f      	ldr	r2, [pc, #124]	@ (800330c <HAL_TIM_Base_Start_IT+0xc8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d018      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x80>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a1e      	ldr	r2, [pc, #120]	@ (8003310 <HAL_TIM_Base_Start_IT+0xcc>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d013      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x80>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003314 <HAL_TIM_Base_Start_IT+0xd0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d00e      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x80>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003318 <HAL_TIM_Base_Start_IT+0xd4>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d009      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x80>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a19      	ldr	r2, [pc, #100]	@ (800331c <HAL_TIM_Base_Start_IT+0xd8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d004      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x80>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a18      	ldr	r2, [pc, #96]	@ (8003320 <HAL_TIM_Base_Start_IT+0xdc>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d111      	bne.n	80032e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	d010      	beq.n	80032f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0201 	orr.w	r2, r2, #1
 80032e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e6:	e007      	b.n	80032f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40010000 	.word	0x40010000
 800330c:	40000400 	.word	0x40000400
 8003310:	40000800 	.word	0x40000800
 8003314:	40000c00 	.word	0x40000c00
 8003318:	40010400 	.word	0x40010400
 800331c:	40014000 	.word	0x40014000
 8003320:	40001800 	.word	0x40001800

08003324 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e041      	b.n	80033ba <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f839 	bl	80033c2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3304      	adds	r3, #4
 8003360:	4619      	mov	r1, r3
 8003362:	4610      	mov	r0, r2
 8003364:	f000 fc56 	bl	8003c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e041      	b.n	800346c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d106      	bne.n	8003402 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f839 	bl	8003474 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2202      	movs	r2, #2
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3304      	adds	r3, #4
 8003412:	4619      	mov	r1, r3
 8003414:	4610      	mov	r0, r2
 8003416:	f000 fbfd 	bl	8003c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d109      	bne.n	80034ac <HAL_TIM_PWM_Start+0x24>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	bf14      	ite	ne
 80034a4:	2301      	movne	r3, #1
 80034a6:	2300      	moveq	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e022      	b.n	80034f2 <HAL_TIM_PWM_Start+0x6a>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d109      	bne.n	80034c6 <HAL_TIM_PWM_Start+0x3e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	bf14      	ite	ne
 80034be:	2301      	movne	r3, #1
 80034c0:	2300      	moveq	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	e015      	b.n	80034f2 <HAL_TIM_PWM_Start+0x6a>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d109      	bne.n	80034e0 <HAL_TIM_PWM_Start+0x58>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	bf14      	ite	ne
 80034d8:	2301      	movne	r3, #1
 80034da:	2300      	moveq	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	e008      	b.n	80034f2 <HAL_TIM_PWM_Start+0x6a>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	bf14      	ite	ne
 80034ec:	2301      	movne	r3, #1
 80034ee:	2300      	moveq	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e07c      	b.n	80035f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d104      	bne.n	800350a <HAL_TIM_PWM_Start+0x82>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003508:	e013      	b.n	8003532 <HAL_TIM_PWM_Start+0xaa>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b04      	cmp	r3, #4
 800350e:	d104      	bne.n	800351a <HAL_TIM_PWM_Start+0x92>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003518:	e00b      	b.n	8003532 <HAL_TIM_PWM_Start+0xaa>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b08      	cmp	r3, #8
 800351e:	d104      	bne.n	800352a <HAL_TIM_PWM_Start+0xa2>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003528:	e003      	b.n	8003532 <HAL_TIM_PWM_Start+0xaa>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2202      	movs	r2, #2
 800352e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2201      	movs	r2, #1
 8003538:	6839      	ldr	r1, [r7, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fe60 	bl	8004200 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a2d      	ldr	r2, [pc, #180]	@ (80035fc <HAL_TIM_PWM_Start+0x174>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d004      	beq.n	8003554 <HAL_TIM_PWM_Start+0xcc>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a2c      	ldr	r2, [pc, #176]	@ (8003600 <HAL_TIM_PWM_Start+0x178>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d101      	bne.n	8003558 <HAL_TIM_PWM_Start+0xd0>
 8003554:	2301      	movs	r3, #1
 8003556:	e000      	b.n	800355a <HAL_TIM_PWM_Start+0xd2>
 8003558:	2300      	movs	r3, #0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800356c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a22      	ldr	r2, [pc, #136]	@ (80035fc <HAL_TIM_PWM_Start+0x174>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d022      	beq.n	80035be <HAL_TIM_PWM_Start+0x136>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003580:	d01d      	beq.n	80035be <HAL_TIM_PWM_Start+0x136>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1f      	ldr	r2, [pc, #124]	@ (8003604 <HAL_TIM_PWM_Start+0x17c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d018      	beq.n	80035be <HAL_TIM_PWM_Start+0x136>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a1d      	ldr	r2, [pc, #116]	@ (8003608 <HAL_TIM_PWM_Start+0x180>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d013      	beq.n	80035be <HAL_TIM_PWM_Start+0x136>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1c      	ldr	r2, [pc, #112]	@ (800360c <HAL_TIM_PWM_Start+0x184>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00e      	beq.n	80035be <HAL_TIM_PWM_Start+0x136>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a16      	ldr	r2, [pc, #88]	@ (8003600 <HAL_TIM_PWM_Start+0x178>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d009      	beq.n	80035be <HAL_TIM_PWM_Start+0x136>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a18      	ldr	r2, [pc, #96]	@ (8003610 <HAL_TIM_PWM_Start+0x188>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d004      	beq.n	80035be <HAL_TIM_PWM_Start+0x136>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a16      	ldr	r2, [pc, #88]	@ (8003614 <HAL_TIM_PWM_Start+0x18c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d111      	bne.n	80035e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2b06      	cmp	r3, #6
 80035ce:	d010      	beq.n	80035f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e0:	e007      	b.n	80035f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f042 0201 	orr.w	r2, r2, #1
 80035f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40010000 	.word	0x40010000
 8003600:	40010400 	.word	0x40010400
 8003604:	40000400 	.word	0x40000400
 8003608:	40000800 	.word	0x40000800
 800360c:	40000c00 	.word	0x40000c00
 8003610:	40014000 	.word	0x40014000
 8003614:	40001800 	.word	0x40001800

08003618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d020      	beq.n	800367c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d01b      	beq.n	800367c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0202 	mvn.w	r2, #2
 800364c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fab7 	bl	8003bd6 <HAL_TIM_IC_CaptureCallback>
 8003668:	e005      	b.n	8003676 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 faa9 	bl	8003bc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 faba 	bl	8003bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	d020      	beq.n	80036c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d01b      	beq.n	80036c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0204 	mvn.w	r2, #4
 8003698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2202      	movs	r2, #2
 800369e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fa91 	bl	8003bd6 <HAL_TIM_IC_CaptureCallback>
 80036b4:	e005      	b.n	80036c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fa83 	bl	8003bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 fa94 	bl	8003bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d020      	beq.n	8003714 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d01b      	beq.n	8003714 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0208 	mvn.w	r2, #8
 80036e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2204      	movs	r2, #4
 80036ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fa6b 	bl	8003bd6 <HAL_TIM_IC_CaptureCallback>
 8003700:	e005      	b.n	800370e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fa5d 	bl	8003bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 fa6e 	bl	8003bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	2b00      	cmp	r3, #0
 800371c:	d020      	beq.n	8003760 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b00      	cmp	r3, #0
 8003726:	d01b      	beq.n	8003760 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0210 	mvn.w	r2, #16
 8003730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2208      	movs	r2, #8
 8003736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fa45 	bl	8003bd6 <HAL_TIM_IC_CaptureCallback>
 800374c:	e005      	b.n	800375a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fa37 	bl	8003bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fa48 	bl	8003bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00c      	beq.n	8003784 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d007      	beq.n	8003784 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0201 	mvn.w	r2, #1
 800377c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fd fc34 	bl	8000fec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00c      	beq.n	80037a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003794:	2b00      	cmp	r3, #0
 8003796:	d007      	beq.n	80037a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80037a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fdd8 	bl	8004358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00c      	beq.n	80037cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d007      	beq.n	80037cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fa19 	bl	8003bfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00c      	beq.n	80037f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d007      	beq.n	80037f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0220 	mvn.w	r2, #32
 80037e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 fdaa 	bl	8004344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037f0:	bf00      	nop
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003812:	2302      	movs	r3, #2
 8003814:	e048      	b.n	80038a8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b0c      	cmp	r3, #12
 8003822:	d839      	bhi.n	8003898 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003824:	a201      	add	r2, pc, #4	@ (adr r2, 800382c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382a:	bf00      	nop
 800382c:	08003861 	.word	0x08003861
 8003830:	08003899 	.word	0x08003899
 8003834:	08003899 	.word	0x08003899
 8003838:	08003899 	.word	0x08003899
 800383c:	0800386f 	.word	0x0800386f
 8003840:	08003899 	.word	0x08003899
 8003844:	08003899 	.word	0x08003899
 8003848:	08003899 	.word	0x08003899
 800384c:	0800387d 	.word	0x0800387d
 8003850:	08003899 	.word	0x08003899
 8003854:	08003899 	.word	0x08003899
 8003858:	08003899 	.word	0x08003899
 800385c:	0800388b 	.word	0x0800388b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68b9      	ldr	r1, [r7, #8]
 8003866:	4618      	mov	r0, r3
 8003868:	f000 fa80 	bl	8003d6c <TIM_OC1_SetConfig>
      break;
 800386c:	e017      	b.n	800389e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68b9      	ldr	r1, [r7, #8]
 8003874:	4618      	mov	r0, r3
 8003876:	f000 fae9 	bl	8003e4c <TIM_OC2_SetConfig>
      break;
 800387a:	e010      	b.n	800389e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fb58 	bl	8003f38 <TIM_OC3_SetConfig>
      break;
 8003888:	e009      	b.n	800389e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fbc5 	bl	8004020 <TIM_OC4_SetConfig>
      break;
 8003896:	e002      	b.n	800389e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	75fb      	strb	r3, [r7, #23]
      break;
 800389c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e0ae      	b.n	8003a2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b0c      	cmp	r3, #12
 80038da:	f200 809f 	bhi.w	8003a1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038de:	a201      	add	r2, pc, #4	@ (adr r2, 80038e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e4:	08003919 	.word	0x08003919
 80038e8:	08003a1d 	.word	0x08003a1d
 80038ec:	08003a1d 	.word	0x08003a1d
 80038f0:	08003a1d 	.word	0x08003a1d
 80038f4:	08003959 	.word	0x08003959
 80038f8:	08003a1d 	.word	0x08003a1d
 80038fc:	08003a1d 	.word	0x08003a1d
 8003900:	08003a1d 	.word	0x08003a1d
 8003904:	0800399b 	.word	0x0800399b
 8003908:	08003a1d 	.word	0x08003a1d
 800390c:	08003a1d 	.word	0x08003a1d
 8003910:	08003a1d 	.word	0x08003a1d
 8003914:	080039db 	.word	0x080039db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	4618      	mov	r0, r3
 8003920:	f000 fa24 	bl	8003d6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0208 	orr.w	r2, r2, #8
 8003932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0204 	bic.w	r2, r2, #4
 8003942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6999      	ldr	r1, [r3, #24]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	691a      	ldr	r2, [r3, #16]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	619a      	str	r2, [r3, #24]
      break;
 8003956:	e064      	b.n	8003a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	4618      	mov	r0, r3
 8003960:	f000 fa74 	bl	8003e4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6999      	ldr	r1, [r3, #24]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	021a      	lsls	r2, r3, #8
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	619a      	str	r2, [r3, #24]
      break;
 8003998:	e043      	b.n	8003a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fac9 	bl	8003f38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69da      	ldr	r2, [r3, #28]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0208 	orr.w	r2, r2, #8
 80039b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69da      	ldr	r2, [r3, #28]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0204 	bic.w	r2, r2, #4
 80039c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69d9      	ldr	r1, [r3, #28]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	61da      	str	r2, [r3, #28]
      break;
 80039d8:	e023      	b.n	8003a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fb1d 	bl	8004020 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69da      	ldr	r2, [r3, #28]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69d9      	ldr	r1, [r3, #28]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	021a      	lsls	r2, r3, #8
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	61da      	str	r2, [r3, #28]
      break;
 8003a1a:	e002      	b.n	8003a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_TIM_ConfigClockSource+0x1c>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e0b4      	b.n	8003bba <HAL_TIM_ConfigClockSource+0x186>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a88:	d03e      	beq.n	8003b08 <HAL_TIM_ConfigClockSource+0xd4>
 8003a8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a8e:	f200 8087 	bhi.w	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8003a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a96:	f000 8086 	beq.w	8003ba6 <HAL_TIM_ConfigClockSource+0x172>
 8003a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a9e:	d87f      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa0:	2b70      	cmp	r3, #112	@ 0x70
 8003aa2:	d01a      	beq.n	8003ada <HAL_TIM_ConfigClockSource+0xa6>
 8003aa4:	2b70      	cmp	r3, #112	@ 0x70
 8003aa6:	d87b      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa8:	2b60      	cmp	r3, #96	@ 0x60
 8003aaa:	d050      	beq.n	8003b4e <HAL_TIM_ConfigClockSource+0x11a>
 8003aac:	2b60      	cmp	r3, #96	@ 0x60
 8003aae:	d877      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab0:	2b50      	cmp	r3, #80	@ 0x50
 8003ab2:	d03c      	beq.n	8003b2e <HAL_TIM_ConfigClockSource+0xfa>
 8003ab4:	2b50      	cmp	r3, #80	@ 0x50
 8003ab6:	d873      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab8:	2b40      	cmp	r3, #64	@ 0x40
 8003aba:	d058      	beq.n	8003b6e <HAL_TIM_ConfigClockSource+0x13a>
 8003abc:	2b40      	cmp	r3, #64	@ 0x40
 8003abe:	d86f      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac0:	2b30      	cmp	r3, #48	@ 0x30
 8003ac2:	d064      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x15a>
 8003ac4:	2b30      	cmp	r3, #48	@ 0x30
 8003ac6:	d86b      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d060      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x15a>
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d867      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d05c      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x15a>
 8003ad4:	2b10      	cmp	r3, #16
 8003ad6:	d05a      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x15a>
 8003ad8:	e062      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003aea:	f000 fb69 	bl	80041c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003afc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	609a      	str	r2, [r3, #8]
      break;
 8003b06:	e04f      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b18:	f000 fb52 	bl	80041c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b2a:	609a      	str	r2, [r3, #8]
      break;
 8003b2c:	e03c      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	f000 fac6 	bl	80040cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2150      	movs	r1, #80	@ 0x50
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fb1f 	bl	800418a <TIM_ITRx_SetConfig>
      break;
 8003b4c:	e02c      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f000 fae5 	bl	800412a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2160      	movs	r1, #96	@ 0x60
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 fb0f 	bl	800418a <TIM_ITRx_SetConfig>
      break;
 8003b6c:	e01c      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f000 faa6 	bl	80040cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2140      	movs	r1, #64	@ 0x40
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 faff 	bl	800418a <TIM_ITRx_SetConfig>
      break;
 8003b8c:	e00c      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4619      	mov	r1, r3
 8003b98:	4610      	mov	r0, r2
 8003b9a:	f000 faf6 	bl	800418a <TIM_ITRx_SetConfig>
      break;
 8003b9e:	e003      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba4:	e000      	b.n	8003ba8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ba6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a46      	ldr	r2, [pc, #280]	@ (8003d40 <TIM_Base_SetConfig+0x12c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d013      	beq.n	8003c54 <TIM_Base_SetConfig+0x40>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c32:	d00f      	beq.n	8003c54 <TIM_Base_SetConfig+0x40>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a43      	ldr	r2, [pc, #268]	@ (8003d44 <TIM_Base_SetConfig+0x130>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00b      	beq.n	8003c54 <TIM_Base_SetConfig+0x40>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a42      	ldr	r2, [pc, #264]	@ (8003d48 <TIM_Base_SetConfig+0x134>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d007      	beq.n	8003c54 <TIM_Base_SetConfig+0x40>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a41      	ldr	r2, [pc, #260]	@ (8003d4c <TIM_Base_SetConfig+0x138>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d003      	beq.n	8003c54 <TIM_Base_SetConfig+0x40>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a40      	ldr	r2, [pc, #256]	@ (8003d50 <TIM_Base_SetConfig+0x13c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d108      	bne.n	8003c66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a35      	ldr	r2, [pc, #212]	@ (8003d40 <TIM_Base_SetConfig+0x12c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d02b      	beq.n	8003cc6 <TIM_Base_SetConfig+0xb2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c74:	d027      	beq.n	8003cc6 <TIM_Base_SetConfig+0xb2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a32      	ldr	r2, [pc, #200]	@ (8003d44 <TIM_Base_SetConfig+0x130>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d023      	beq.n	8003cc6 <TIM_Base_SetConfig+0xb2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a31      	ldr	r2, [pc, #196]	@ (8003d48 <TIM_Base_SetConfig+0x134>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d01f      	beq.n	8003cc6 <TIM_Base_SetConfig+0xb2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a30      	ldr	r2, [pc, #192]	@ (8003d4c <TIM_Base_SetConfig+0x138>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d01b      	beq.n	8003cc6 <TIM_Base_SetConfig+0xb2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a2f      	ldr	r2, [pc, #188]	@ (8003d50 <TIM_Base_SetConfig+0x13c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d017      	beq.n	8003cc6 <TIM_Base_SetConfig+0xb2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a2e      	ldr	r2, [pc, #184]	@ (8003d54 <TIM_Base_SetConfig+0x140>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d013      	beq.n	8003cc6 <TIM_Base_SetConfig+0xb2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a2d      	ldr	r2, [pc, #180]	@ (8003d58 <TIM_Base_SetConfig+0x144>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00f      	beq.n	8003cc6 <TIM_Base_SetConfig+0xb2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a2c      	ldr	r2, [pc, #176]	@ (8003d5c <TIM_Base_SetConfig+0x148>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d00b      	beq.n	8003cc6 <TIM_Base_SetConfig+0xb2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a2b      	ldr	r2, [pc, #172]	@ (8003d60 <TIM_Base_SetConfig+0x14c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d007      	beq.n	8003cc6 <TIM_Base_SetConfig+0xb2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a2a      	ldr	r2, [pc, #168]	@ (8003d64 <TIM_Base_SetConfig+0x150>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d003      	beq.n	8003cc6 <TIM_Base_SetConfig+0xb2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a29      	ldr	r2, [pc, #164]	@ (8003d68 <TIM_Base_SetConfig+0x154>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d108      	bne.n	8003cd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a10      	ldr	r2, [pc, #64]	@ (8003d40 <TIM_Base_SetConfig+0x12c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d003      	beq.n	8003d0c <TIM_Base_SetConfig+0xf8>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a12      	ldr	r2, [pc, #72]	@ (8003d50 <TIM_Base_SetConfig+0x13c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d103      	bne.n	8003d14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d105      	bne.n	8003d32 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f023 0201 	bic.w	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	611a      	str	r2, [r3, #16]
  }
}
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40010000 	.word	0x40010000
 8003d44:	40000400 	.word	0x40000400
 8003d48:	40000800 	.word	0x40000800
 8003d4c:	40000c00 	.word	0x40000c00
 8003d50:	40010400 	.word	0x40010400
 8003d54:	40014000 	.word	0x40014000
 8003d58:	40014400 	.word	0x40014400
 8003d5c:	40014800 	.word	0x40014800
 8003d60:	40001800 	.word	0x40001800
 8003d64:	40001c00 	.word	0x40001c00
 8003d68:	40002000 	.word	0x40002000

08003d6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	f023 0201 	bic.w	r2, r3, #1
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0303 	bic.w	r3, r3, #3
 8003da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f023 0302 	bic.w	r3, r3, #2
 8003db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a20      	ldr	r2, [pc, #128]	@ (8003e44 <TIM_OC1_SetConfig+0xd8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d003      	beq.n	8003dd0 <TIM_OC1_SetConfig+0x64>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a1f      	ldr	r2, [pc, #124]	@ (8003e48 <TIM_OC1_SetConfig+0xdc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d10c      	bne.n	8003dea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f023 0308 	bic.w	r3, r3, #8
 8003dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f023 0304 	bic.w	r3, r3, #4
 8003de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a15      	ldr	r2, [pc, #84]	@ (8003e44 <TIM_OC1_SetConfig+0xd8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d003      	beq.n	8003dfa <TIM_OC1_SetConfig+0x8e>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a14      	ldr	r2, [pc, #80]	@ (8003e48 <TIM_OC1_SetConfig+0xdc>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d111      	bne.n	8003e1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	621a      	str	r2, [r3, #32]
}
 8003e38:	bf00      	nop
 8003e3a:	371c      	adds	r7, #28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	40010000 	.word	0x40010000
 8003e48:	40010400 	.word	0x40010400

08003e4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	f023 0210 	bic.w	r2, r3, #16
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	021b      	lsls	r3, r3, #8
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f023 0320 	bic.w	r3, r3, #32
 8003e96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a22      	ldr	r2, [pc, #136]	@ (8003f30 <TIM_OC2_SetConfig+0xe4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d003      	beq.n	8003eb4 <TIM_OC2_SetConfig+0x68>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a21      	ldr	r2, [pc, #132]	@ (8003f34 <TIM_OC2_SetConfig+0xe8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d10d      	bne.n	8003ed0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ece:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a17      	ldr	r2, [pc, #92]	@ (8003f30 <TIM_OC2_SetConfig+0xe4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d003      	beq.n	8003ee0 <TIM_OC2_SetConfig+0x94>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a16      	ldr	r2, [pc, #88]	@ (8003f34 <TIM_OC2_SetConfig+0xe8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d113      	bne.n	8003f08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ee6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003eee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	621a      	str	r2, [r3, #32]
}
 8003f22:	bf00      	nop
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40010000 	.word	0x40010000
 8003f34:	40010400 	.word	0x40010400

08003f38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 0303 	bic.w	r3, r3, #3
 8003f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	021b      	lsls	r3, r3, #8
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a21      	ldr	r2, [pc, #132]	@ (8004018 <TIM_OC3_SetConfig+0xe0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d003      	beq.n	8003f9e <TIM_OC3_SetConfig+0x66>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a20      	ldr	r2, [pc, #128]	@ (800401c <TIM_OC3_SetConfig+0xe4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d10d      	bne.n	8003fba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a16      	ldr	r2, [pc, #88]	@ (8004018 <TIM_OC3_SetConfig+0xe0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_OC3_SetConfig+0x92>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a15      	ldr	r2, [pc, #84]	@ (800401c <TIM_OC3_SetConfig+0xe4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d113      	bne.n	8003ff2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	621a      	str	r2, [r3, #32]
}
 800400c:	bf00      	nop
 800400e:	371c      	adds	r7, #28
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	40010000 	.word	0x40010000
 800401c:	40010400 	.word	0x40010400

08004020 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800404e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4313      	orrs	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800406a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	031b      	lsls	r3, r3, #12
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a12      	ldr	r2, [pc, #72]	@ (80040c4 <TIM_OC4_SetConfig+0xa4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d003      	beq.n	8004088 <TIM_OC4_SetConfig+0x68>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a11      	ldr	r2, [pc, #68]	@ (80040c8 <TIM_OC4_SetConfig+0xa8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d109      	bne.n	800409c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800408e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	019b      	lsls	r3, r3, #6
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	621a      	str	r2, [r3, #32]
}
 80040b6:	bf00      	nop
 80040b8:	371c      	adds	r7, #28
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40010000 	.word	0x40010000
 80040c8:	40010400 	.word	0x40010400

080040cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f023 0201 	bic.w	r2, r3, #1
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f023 030a 	bic.w	r3, r3, #10
 8004108:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	621a      	str	r2, [r3, #32]
}
 800411e:	bf00      	nop
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800412a:	b480      	push	{r7}
 800412c:	b087      	sub	sp, #28
 800412e:	af00      	add	r7, sp, #0
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	f023 0210 	bic.w	r2, r3, #16
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004154:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	031b      	lsls	r3, r3, #12
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004166:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	621a      	str	r2, [r3, #32]
}
 800417e:	bf00      	nop
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800418a:	b480      	push	{r7}
 800418c:	b085      	sub	sp, #20
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f043 0307 	orr.w	r3, r3, #7
 80041ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	609a      	str	r2, [r3, #8]
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	021a      	lsls	r2, r3, #8
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	609a      	str	r2, [r3, #8]
}
 80041f4:	bf00      	nop
 80041f6:	371c      	adds	r7, #28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f003 031f 	and.w	r3, r3, #31
 8004212:	2201      	movs	r2, #1
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a1a      	ldr	r2, [r3, #32]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	43db      	mvns	r3, r3
 8004222:	401a      	ands	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a1a      	ldr	r2, [r3, #32]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f003 031f 	and.w	r3, r3, #31
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	fa01 f303 	lsl.w	r3, r1, r3
 8004238:	431a      	orrs	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	621a      	str	r2, [r3, #32]
}
 800423e:	bf00      	nop
 8004240:	371c      	adds	r7, #28
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
	...

0800424c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800425c:	2b01      	cmp	r3, #1
 800425e:	d101      	bne.n	8004264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004260:	2302      	movs	r3, #2
 8004262:	e05a      	b.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800428a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a21      	ldr	r2, [pc, #132]	@ (8004328 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d022      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b0:	d01d      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a1d      	ldr	r2, [pc, #116]	@ (800432c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d018      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d013      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00e      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a18      	ldr	r2, [pc, #96]	@ (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d009      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a17      	ldr	r2, [pc, #92]	@ (800433c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d004      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a15      	ldr	r2, [pc, #84]	@ (8004340 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d10c      	bne.n	8004308 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40010000 	.word	0x40010000
 800432c:	40000400 	.word	0x40000400
 8004330:	40000800 	.word	0x40000800
 8004334:	40000c00 	.word	0x40000c00
 8004338:	40010400 	.word	0x40010400
 800433c:	40014000 	.word	0x40014000
 8004340:	40001800 	.word	0x40001800

08004344 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e042      	b.n	8004404 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fd faa4 	bl	80018e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2224      	movs	r2, #36	@ 0x24
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fa95 	bl	80048e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695a      	ldr	r2, [r3, #20]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	4613      	mov	r3, r2
 8004418:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b20      	cmp	r3, #32
 8004424:	d112      	bne.n	800444c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <HAL_UART_Receive_DMA+0x26>
 800442c:	88fb      	ldrh	r3, [r7, #6]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e00b      	b.n	800444e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800443c:	88fb      	ldrh	r3, [r7, #6]
 800443e:	461a      	mov	r2, r3
 8004440:	68b9      	ldr	r1, [r7, #8]
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f926 	bl	8004694 <UART_Start_Receive_DMA>
 8004448:	4603      	mov	r3, r0
 800444a:	e000      	b.n	800444e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800444c:	2302      	movs	r3, #2
  }
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	460b      	mov	r3, r1
 8004488:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b09c      	sub	sp, #112	@ 0x70
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d172      	bne.n	8004598 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80044b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044b4:	2200      	movs	r2, #0
 80044b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	330c      	adds	r3, #12
 80044be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80044c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	330c      	adds	r3, #12
 80044d6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80044d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80044da:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80044e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e5      	bne.n	80044b8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3314      	adds	r3, #20
 80044f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f6:	e853 3f00 	ldrex	r3, [r3]
 80044fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	667b      	str	r3, [r7, #100]	@ 0x64
 8004504:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3314      	adds	r3, #20
 800450a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800450c:	647a      	str	r2, [r7, #68]	@ 0x44
 800450e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004510:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004512:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004514:	e841 2300 	strex	r3, r2, [r1]
 8004518:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800451a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e5      	bne.n	80044ec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004520:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3314      	adds	r3, #20
 8004526:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452a:	e853 3f00 	ldrex	r3, [r3]
 800452e:	623b      	str	r3, [r7, #32]
   return(result);
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004536:	663b      	str	r3, [r7, #96]	@ 0x60
 8004538:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3314      	adds	r3, #20
 800453e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004540:	633a      	str	r2, [r7, #48]	@ 0x30
 8004542:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004544:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004548:	e841 2300 	strex	r3, r2, [r1]
 800454c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800454e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1e5      	bne.n	8004520 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004554:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004556:	2220      	movs	r2, #32
 8004558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800455c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800455e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004560:	2b01      	cmp	r3, #1
 8004562:	d119      	bne.n	8004598 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004564:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	330c      	adds	r3, #12
 800456a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	60fb      	str	r3, [r7, #12]
   return(result);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0310 	bic.w	r3, r3, #16
 800457a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800457c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	330c      	adds	r3, #12
 8004582:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004584:	61fa      	str	r2, [r7, #28]
 8004586:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004588:	69b9      	ldr	r1, [r7, #24]
 800458a:	69fa      	ldr	r2, [r7, #28]
 800458c:	e841 2300 	strex	r3, r2, [r1]
 8004590:	617b      	str	r3, [r7, #20]
   return(result);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1e5      	bne.n	8004564 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004598:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800459a:	2200      	movs	r2, #0
 800459c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800459e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d106      	bne.n	80045b4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045aa:	4619      	mov	r1, r3
 80045ac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80045ae:	f7ff ff66 	bl	800447e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045b2:	e002      	b.n	80045ba <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80045b4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80045b6:	f7fc fc5b 	bl	8000e70 <HAL_UART_RxCpltCallback>
}
 80045ba:	bf00      	nop
 80045bc:	3770      	adds	r7, #112	@ 0x70
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2201      	movs	r2, #1
 80045d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d108      	bne.n	80045f0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	4619      	mov	r1, r3
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f7ff ff48 	bl	800447e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045ee:	e002      	b.n	80045f6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f7ff ff30 	bl	8004456 <HAL_UART_RxHalfCpltCallback>
}
 80045f6:	bf00      	nop
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b084      	sub	sp, #16
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800461a:	2b80      	cmp	r3, #128	@ 0x80
 800461c:	bf0c      	ite	eq
 800461e:	2301      	moveq	r3, #1
 8004620:	2300      	movne	r3, #0
 8004622:	b2db      	uxtb	r3, r3
 8004624:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b21      	cmp	r3, #33	@ 0x21
 8004630:	d108      	bne.n	8004644 <UART_DMAError+0x46>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2200      	movs	r2, #0
 800463c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800463e:	68b8      	ldr	r0, [r7, #8]
 8004640:	f000 f8c2 	bl	80047c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800464e:	2b40      	cmp	r3, #64	@ 0x40
 8004650:	bf0c      	ite	eq
 8004652:	2301      	moveq	r3, #1
 8004654:	2300      	movne	r3, #0
 8004656:	b2db      	uxtb	r3, r3
 8004658:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b22      	cmp	r3, #34	@ 0x22
 8004664:	d108      	bne.n	8004678 <UART_DMAError+0x7a>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d005      	beq.n	8004678 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2200      	movs	r2, #0
 8004670:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004672:	68b8      	ldr	r0, [r7, #8]
 8004674:	f000 f8d0 	bl	8004818 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467c:	f043 0210 	orr.w	r2, r3, #16
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004684:	68b8      	ldr	r0, [r7, #8]
 8004686:	f7ff fef0 	bl	800446a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800468a:	bf00      	nop
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
	...

08004694 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b098      	sub	sp, #96	@ 0x60
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	4613      	mov	r3, r2
 80046a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	88fa      	ldrh	r2, [r7, #6]
 80046ac:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2222      	movs	r2, #34	@ 0x22
 80046b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c0:	4a3e      	ldr	r2, [pc, #248]	@ (80047bc <UART_Start_Receive_DMA+0x128>)
 80046c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c8:	4a3d      	ldr	r2, [pc, #244]	@ (80047c0 <UART_Start_Receive_DMA+0x12c>)
 80046ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d0:	4a3c      	ldr	r2, [pc, #240]	@ (80047c4 <UART_Start_Receive_DMA+0x130>)
 80046d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d8:	2200      	movs	r2, #0
 80046da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80046dc:	f107 0308 	add.w	r3, r7, #8
 80046e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3304      	adds	r3, #4
 80046ec:	4619      	mov	r1, r3
 80046ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	88fb      	ldrh	r3, [r7, #6]
 80046f4:	f7fd fc46 	bl	8001f84 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80046f8:	2300      	movs	r3, #0
 80046fa:	613b      	str	r3, [r7, #16]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	613b      	str	r3, [r7, #16]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d019      	beq.n	800474a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	330c      	adds	r3, #12
 800471c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800472c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	330c      	adds	r3, #12
 8004734:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004736:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004738:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800473c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e5      	bne.n	8004716 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3314      	adds	r3, #20
 8004750:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004754:	e853 3f00 	ldrex	r3, [r3]
 8004758:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800475a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475c:	f043 0301 	orr.w	r3, r3, #1
 8004760:	657b      	str	r3, [r7, #84]	@ 0x54
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3314      	adds	r3, #20
 8004768:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800476a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800476c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004770:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004772:	e841 2300 	strex	r3, r2, [r1]
 8004776:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1e5      	bne.n	800474a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3314      	adds	r3, #20
 8004784:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	e853 3f00 	ldrex	r3, [r3]
 800478c:	617b      	str	r3, [r7, #20]
   return(result);
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004794:	653b      	str	r3, [r7, #80]	@ 0x50
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	3314      	adds	r3, #20
 800479c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800479e:	627a      	str	r2, [r7, #36]	@ 0x24
 80047a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a2:	6a39      	ldr	r1, [r7, #32]
 80047a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047a6:	e841 2300 	strex	r3, r2, [r1]
 80047aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1e5      	bne.n	800477e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3760      	adds	r7, #96	@ 0x60
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	08004497 	.word	0x08004497
 80047c0:	080045c3 	.word	0x080045c3
 80047c4:	080045ff 	.word	0x080045ff

080047c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b089      	sub	sp, #36	@ 0x24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	330c      	adds	r3, #12
 80047d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	e853 3f00 	ldrex	r3, [r3]
 80047de:	60bb      	str	r3, [r7, #8]
   return(result);
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80047e6:	61fb      	str	r3, [r7, #28]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	330c      	adds	r3, #12
 80047ee:	69fa      	ldr	r2, [r7, #28]
 80047f0:	61ba      	str	r2, [r7, #24]
 80047f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f4:	6979      	ldr	r1, [r7, #20]
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	e841 2300 	strex	r3, r2, [r1]
 80047fc:	613b      	str	r3, [r7, #16]
   return(result);
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1e5      	bne.n	80047d0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800480c:	bf00      	nop
 800480e:	3724      	adds	r7, #36	@ 0x24
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004818:	b480      	push	{r7}
 800481a:	b095      	sub	sp, #84	@ 0x54
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	330c      	adds	r3, #12
 8004826:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800482a:	e853 3f00 	ldrex	r3, [r3]
 800482e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004832:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	330c      	adds	r3, #12
 800483e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004840:	643a      	str	r2, [r7, #64]	@ 0x40
 8004842:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004844:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004846:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004848:	e841 2300 	strex	r3, r2, [r1]
 800484c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800484e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1e5      	bne.n	8004820 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3314      	adds	r3, #20
 800485a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	e853 3f00 	ldrex	r3, [r3]
 8004862:	61fb      	str	r3, [r7, #28]
   return(result);
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	f023 0301 	bic.w	r3, r3, #1
 800486a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3314      	adds	r3, #20
 8004872:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004874:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004876:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004878:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800487a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800487c:	e841 2300 	strex	r3, r2, [r1]
 8004880:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1e5      	bne.n	8004854 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488c:	2b01      	cmp	r3, #1
 800488e:	d119      	bne.n	80048c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	330c      	adds	r3, #12
 8004896:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	e853 3f00 	ldrex	r3, [r3]
 800489e:	60bb      	str	r3, [r7, #8]
   return(result);
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f023 0310 	bic.w	r3, r3, #16
 80048a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	330c      	adds	r3, #12
 80048ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048b0:	61ba      	str	r2, [r7, #24]
 80048b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b4:	6979      	ldr	r1, [r7, #20]
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	e841 2300 	strex	r3, r2, [r1]
 80048bc:	613b      	str	r3, [r7, #16]
   return(result);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1e5      	bne.n	8004890 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80048d2:	bf00      	nop
 80048d4:	3754      	adds	r7, #84	@ 0x54
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
	...

080048e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048e4:	b0c0      	sub	sp, #256	@ 0x100
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048fc:	68d9      	ldr	r1, [r3, #12]
 80048fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	ea40 0301 	orr.w	r3, r0, r1
 8004908:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800490a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	431a      	orrs	r2, r3
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	431a      	orrs	r2, r3
 8004920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800492c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004938:	f021 010c 	bic.w	r1, r1, #12
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004946:	430b      	orrs	r3, r1
 8004948:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800494a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800495a:	6999      	ldr	r1, [r3, #24]
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	ea40 0301 	orr.w	r3, r0, r1
 8004966:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	4b8f      	ldr	r3, [pc, #572]	@ (8004bac <UART_SetConfig+0x2cc>)
 8004970:	429a      	cmp	r2, r3
 8004972:	d005      	beq.n	8004980 <UART_SetConfig+0xa0>
 8004974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	4b8d      	ldr	r3, [pc, #564]	@ (8004bb0 <UART_SetConfig+0x2d0>)
 800497c:	429a      	cmp	r2, r3
 800497e:	d104      	bne.n	800498a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004980:	f7fe fbfc 	bl	800317c <HAL_RCC_GetPCLK2Freq>
 8004984:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004988:	e003      	b.n	8004992 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800498a:	f7fe fbe3 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 800498e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800499c:	f040 810c 	bne.w	8004bb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049a4:	2200      	movs	r2, #0
 80049a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80049aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80049ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80049b2:	4622      	mov	r2, r4
 80049b4:	462b      	mov	r3, r5
 80049b6:	1891      	adds	r1, r2, r2
 80049b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80049ba:	415b      	adcs	r3, r3
 80049bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80049c2:	4621      	mov	r1, r4
 80049c4:	eb12 0801 	adds.w	r8, r2, r1
 80049c8:	4629      	mov	r1, r5
 80049ca:	eb43 0901 	adc.w	r9, r3, r1
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049e2:	4690      	mov	r8, r2
 80049e4:	4699      	mov	r9, r3
 80049e6:	4623      	mov	r3, r4
 80049e8:	eb18 0303 	adds.w	r3, r8, r3
 80049ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80049f0:	462b      	mov	r3, r5
 80049f2:	eb49 0303 	adc.w	r3, r9, r3
 80049f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80049fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a0e:	460b      	mov	r3, r1
 8004a10:	18db      	adds	r3, r3, r3
 8004a12:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a14:	4613      	mov	r3, r2
 8004a16:	eb42 0303 	adc.w	r3, r2, r3
 8004a1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004a20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004a24:	f7fc f8ac 	bl	8000b80 <__aeabi_uldivmod>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4b61      	ldr	r3, [pc, #388]	@ (8004bb4 <UART_SetConfig+0x2d4>)
 8004a2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	011c      	lsls	r4, r3, #4
 8004a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a48:	4642      	mov	r2, r8
 8004a4a:	464b      	mov	r3, r9
 8004a4c:	1891      	adds	r1, r2, r2
 8004a4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a50:	415b      	adcs	r3, r3
 8004a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a58:	4641      	mov	r1, r8
 8004a5a:	eb12 0a01 	adds.w	sl, r2, r1
 8004a5e:	4649      	mov	r1, r9
 8004a60:	eb43 0b01 	adc.w	fp, r3, r1
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a78:	4692      	mov	sl, r2
 8004a7a:	469b      	mov	fp, r3
 8004a7c:	4643      	mov	r3, r8
 8004a7e:	eb1a 0303 	adds.w	r3, sl, r3
 8004a82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a86:	464b      	mov	r3, r9
 8004a88:	eb4b 0303 	adc.w	r3, fp, r3
 8004a8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004aa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	18db      	adds	r3, r3, r3
 8004aa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004aaa:	4613      	mov	r3, r2
 8004aac:	eb42 0303 	adc.w	r3, r2, r3
 8004ab0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ab2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004ab6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004aba:	f7fc f861 	bl	8000b80 <__aeabi_uldivmod>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4611      	mov	r1, r2
 8004ac4:	4b3b      	ldr	r3, [pc, #236]	@ (8004bb4 <UART_SetConfig+0x2d4>)
 8004ac6:	fba3 2301 	umull	r2, r3, r3, r1
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	2264      	movs	r2, #100	@ 0x64
 8004ace:	fb02 f303 	mul.w	r3, r2, r3
 8004ad2:	1acb      	subs	r3, r1, r3
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004ada:	4b36      	ldr	r3, [pc, #216]	@ (8004bb4 <UART_SetConfig+0x2d4>)
 8004adc:	fba3 2302 	umull	r2, r3, r3, r2
 8004ae0:	095b      	lsrs	r3, r3, #5
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ae8:	441c      	add	r4, r3
 8004aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aee:	2200      	movs	r2, #0
 8004af0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004af4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004af8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004afc:	4642      	mov	r2, r8
 8004afe:	464b      	mov	r3, r9
 8004b00:	1891      	adds	r1, r2, r2
 8004b02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b04:	415b      	adcs	r3, r3
 8004b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b0c:	4641      	mov	r1, r8
 8004b0e:	1851      	adds	r1, r2, r1
 8004b10:	6339      	str	r1, [r7, #48]	@ 0x30
 8004b12:	4649      	mov	r1, r9
 8004b14:	414b      	adcs	r3, r1
 8004b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	f04f 0300 	mov.w	r3, #0
 8004b20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004b24:	4659      	mov	r1, fp
 8004b26:	00cb      	lsls	r3, r1, #3
 8004b28:	4651      	mov	r1, sl
 8004b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b2e:	4651      	mov	r1, sl
 8004b30:	00ca      	lsls	r2, r1, #3
 8004b32:	4610      	mov	r0, r2
 8004b34:	4619      	mov	r1, r3
 8004b36:	4603      	mov	r3, r0
 8004b38:	4642      	mov	r2, r8
 8004b3a:	189b      	adds	r3, r3, r2
 8004b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b40:	464b      	mov	r3, r9
 8004b42:	460a      	mov	r2, r1
 8004b44:	eb42 0303 	adc.w	r3, r2, r3
 8004b48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b60:	460b      	mov	r3, r1
 8004b62:	18db      	adds	r3, r3, r3
 8004b64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b66:	4613      	mov	r3, r2
 8004b68:	eb42 0303 	adc.w	r3, r2, r3
 8004b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004b76:	f7fc f803 	bl	8000b80 <__aeabi_uldivmod>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb4 <UART_SetConfig+0x2d4>)
 8004b80:	fba3 1302 	umull	r1, r3, r3, r2
 8004b84:	095b      	lsrs	r3, r3, #5
 8004b86:	2164      	movs	r1, #100	@ 0x64
 8004b88:	fb01 f303 	mul.w	r3, r1, r3
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	3332      	adds	r3, #50	@ 0x32
 8004b92:	4a08      	ldr	r2, [pc, #32]	@ (8004bb4 <UART_SetConfig+0x2d4>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	f003 0207 	and.w	r2, r3, #7
 8004b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4422      	add	r2, r4
 8004ba6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ba8:	e106      	b.n	8004db8 <UART_SetConfig+0x4d8>
 8004baa:	bf00      	nop
 8004bac:	40011000 	.word	0x40011000
 8004bb0:	40011400 	.word	0x40011400
 8004bb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004bc2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004bc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004bca:	4642      	mov	r2, r8
 8004bcc:	464b      	mov	r3, r9
 8004bce:	1891      	adds	r1, r2, r2
 8004bd0:	6239      	str	r1, [r7, #32]
 8004bd2:	415b      	adcs	r3, r3
 8004bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bda:	4641      	mov	r1, r8
 8004bdc:	1854      	adds	r4, r2, r1
 8004bde:	4649      	mov	r1, r9
 8004be0:	eb43 0501 	adc.w	r5, r3, r1
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	f04f 0300 	mov.w	r3, #0
 8004bec:	00eb      	lsls	r3, r5, #3
 8004bee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bf2:	00e2      	lsls	r2, r4, #3
 8004bf4:	4614      	mov	r4, r2
 8004bf6:	461d      	mov	r5, r3
 8004bf8:	4643      	mov	r3, r8
 8004bfa:	18e3      	adds	r3, r4, r3
 8004bfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c00:	464b      	mov	r3, r9
 8004c02:	eb45 0303 	adc.w	r3, r5, r3
 8004c06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c26:	4629      	mov	r1, r5
 8004c28:	008b      	lsls	r3, r1, #2
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c30:	4621      	mov	r1, r4
 8004c32:	008a      	lsls	r2, r1, #2
 8004c34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c38:	f7fb ffa2 	bl	8000b80 <__aeabi_uldivmod>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4b60      	ldr	r3, [pc, #384]	@ (8004dc4 <UART_SetConfig+0x4e4>)
 8004c42:	fba3 2302 	umull	r2, r3, r3, r2
 8004c46:	095b      	lsrs	r3, r3, #5
 8004c48:	011c      	lsls	r4, r3, #4
 8004c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004c5c:	4642      	mov	r2, r8
 8004c5e:	464b      	mov	r3, r9
 8004c60:	1891      	adds	r1, r2, r2
 8004c62:	61b9      	str	r1, [r7, #24]
 8004c64:	415b      	adcs	r3, r3
 8004c66:	61fb      	str	r3, [r7, #28]
 8004c68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c6c:	4641      	mov	r1, r8
 8004c6e:	1851      	adds	r1, r2, r1
 8004c70:	6139      	str	r1, [r7, #16]
 8004c72:	4649      	mov	r1, r9
 8004c74:	414b      	adcs	r3, r1
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c84:	4659      	mov	r1, fp
 8004c86:	00cb      	lsls	r3, r1, #3
 8004c88:	4651      	mov	r1, sl
 8004c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c8e:	4651      	mov	r1, sl
 8004c90:	00ca      	lsls	r2, r1, #3
 8004c92:	4610      	mov	r0, r2
 8004c94:	4619      	mov	r1, r3
 8004c96:	4603      	mov	r3, r0
 8004c98:	4642      	mov	r2, r8
 8004c9a:	189b      	adds	r3, r3, r2
 8004c9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ca0:	464b      	mov	r3, r9
 8004ca2:	460a      	mov	r2, r1
 8004ca4:	eb42 0303 	adc.w	r3, r2, r3
 8004ca8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cb6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004cc4:	4649      	mov	r1, r9
 8004cc6:	008b      	lsls	r3, r1, #2
 8004cc8:	4641      	mov	r1, r8
 8004cca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cce:	4641      	mov	r1, r8
 8004cd0:	008a      	lsls	r2, r1, #2
 8004cd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004cd6:	f7fb ff53 	bl	8000b80 <__aeabi_uldivmod>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4611      	mov	r1, r2
 8004ce0:	4b38      	ldr	r3, [pc, #224]	@ (8004dc4 <UART_SetConfig+0x4e4>)
 8004ce2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	2264      	movs	r2, #100	@ 0x64
 8004cea:	fb02 f303 	mul.w	r3, r2, r3
 8004cee:	1acb      	subs	r3, r1, r3
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	3332      	adds	r3, #50	@ 0x32
 8004cf4:	4a33      	ldr	r2, [pc, #204]	@ (8004dc4 <UART_SetConfig+0x4e4>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d00:	441c      	add	r4, r3
 8004d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d06:	2200      	movs	r2, #0
 8004d08:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004d10:	4642      	mov	r2, r8
 8004d12:	464b      	mov	r3, r9
 8004d14:	1891      	adds	r1, r2, r2
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	415b      	adcs	r3, r3
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d20:	4641      	mov	r1, r8
 8004d22:	1851      	adds	r1, r2, r1
 8004d24:	6039      	str	r1, [r7, #0]
 8004d26:	4649      	mov	r1, r9
 8004d28:	414b      	adcs	r3, r1
 8004d2a:	607b      	str	r3, [r7, #4]
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d38:	4659      	mov	r1, fp
 8004d3a:	00cb      	lsls	r3, r1, #3
 8004d3c:	4651      	mov	r1, sl
 8004d3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d42:	4651      	mov	r1, sl
 8004d44:	00ca      	lsls	r2, r1, #3
 8004d46:	4610      	mov	r0, r2
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	4642      	mov	r2, r8
 8004d4e:	189b      	adds	r3, r3, r2
 8004d50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d52:	464b      	mov	r3, r9
 8004d54:	460a      	mov	r2, r1
 8004d56:	eb42 0303 	adc.w	r3, r2, r3
 8004d5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d66:	667a      	str	r2, [r7, #100]	@ 0x64
 8004d68:	f04f 0200 	mov.w	r2, #0
 8004d6c:	f04f 0300 	mov.w	r3, #0
 8004d70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004d74:	4649      	mov	r1, r9
 8004d76:	008b      	lsls	r3, r1, #2
 8004d78:	4641      	mov	r1, r8
 8004d7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d7e:	4641      	mov	r1, r8
 8004d80:	008a      	lsls	r2, r1, #2
 8004d82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d86:	f7fb fefb 	bl	8000b80 <__aeabi_uldivmod>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004dc4 <UART_SetConfig+0x4e4>)
 8004d90:	fba3 1302 	umull	r1, r3, r3, r2
 8004d94:	095b      	lsrs	r3, r3, #5
 8004d96:	2164      	movs	r1, #100	@ 0x64
 8004d98:	fb01 f303 	mul.w	r3, r1, r3
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	011b      	lsls	r3, r3, #4
 8004da0:	3332      	adds	r3, #50	@ 0x32
 8004da2:	4a08      	ldr	r2, [pc, #32]	@ (8004dc4 <UART_SetConfig+0x4e4>)
 8004da4:	fba2 2303 	umull	r2, r3, r2, r3
 8004da8:	095b      	lsrs	r3, r3, #5
 8004daa:	f003 020f 	and.w	r2, r3, #15
 8004dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4422      	add	r2, r4
 8004db6:	609a      	str	r2, [r3, #8]
}
 8004db8:	bf00      	nop
 8004dba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dc4:	51eb851f 	.word	0x51eb851f

08004dc8 <memset>:
 8004dc8:	4402      	add	r2, r0
 8004dca:	4603      	mov	r3, r0
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d100      	bne.n	8004dd2 <memset+0xa>
 8004dd0:	4770      	bx	lr
 8004dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8004dd6:	e7f9      	b.n	8004dcc <memset+0x4>

08004dd8 <__errno>:
 8004dd8:	4b01      	ldr	r3, [pc, #4]	@ (8004de0 <__errno+0x8>)
 8004dda:	6818      	ldr	r0, [r3, #0]
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	20000010 	.word	0x20000010

08004de4 <__libc_init_array>:
 8004de4:	b570      	push	{r4, r5, r6, lr}
 8004de6:	4d0d      	ldr	r5, [pc, #52]	@ (8004e1c <__libc_init_array+0x38>)
 8004de8:	4c0d      	ldr	r4, [pc, #52]	@ (8004e20 <__libc_init_array+0x3c>)
 8004dea:	1b64      	subs	r4, r4, r5
 8004dec:	10a4      	asrs	r4, r4, #2
 8004dee:	2600      	movs	r6, #0
 8004df0:	42a6      	cmp	r6, r4
 8004df2:	d109      	bne.n	8004e08 <__libc_init_array+0x24>
 8004df4:	4d0b      	ldr	r5, [pc, #44]	@ (8004e24 <__libc_init_array+0x40>)
 8004df6:	4c0c      	ldr	r4, [pc, #48]	@ (8004e28 <__libc_init_array+0x44>)
 8004df8:	f000 ff78 	bl	8005cec <_init>
 8004dfc:	1b64      	subs	r4, r4, r5
 8004dfe:	10a4      	asrs	r4, r4, #2
 8004e00:	2600      	movs	r6, #0
 8004e02:	42a6      	cmp	r6, r4
 8004e04:	d105      	bne.n	8004e12 <__libc_init_array+0x2e>
 8004e06:	bd70      	pop	{r4, r5, r6, pc}
 8004e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e0c:	4798      	blx	r3
 8004e0e:	3601      	adds	r6, #1
 8004e10:	e7ee      	b.n	8004df0 <__libc_init_array+0xc>
 8004e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e16:	4798      	blx	r3
 8004e18:	3601      	adds	r6, #1
 8004e1a:	e7f2      	b.n	8004e02 <__libc_init_array+0x1e>
 8004e1c:	08005d60 	.word	0x08005d60
 8004e20:	08005d60 	.word	0x08005d60
 8004e24:	08005d60 	.word	0x08005d60
 8004e28:	08005d64 	.word	0x08005d64

08004e2c <pow>:
 8004e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2e:	ed2d 8b02 	vpush	{d8}
 8004e32:	eeb0 8a40 	vmov.f32	s16, s0
 8004e36:	eef0 8a60 	vmov.f32	s17, s1
 8004e3a:	ec55 4b11 	vmov	r4, r5, d1
 8004e3e:	f000 f873 	bl	8004f28 <__ieee754_pow>
 8004e42:	4622      	mov	r2, r4
 8004e44:	462b      	mov	r3, r5
 8004e46:	4620      	mov	r0, r4
 8004e48:	4629      	mov	r1, r5
 8004e4a:	ec57 6b10 	vmov	r6, r7, d0
 8004e4e:	f7fb fe11 	bl	8000a74 <__aeabi_dcmpun>
 8004e52:	2800      	cmp	r0, #0
 8004e54:	d13b      	bne.n	8004ece <pow+0xa2>
 8004e56:	ec51 0b18 	vmov	r0, r1, d8
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f7fb fdd7 	bl	8000a10 <__aeabi_dcmpeq>
 8004e62:	b1b8      	cbz	r0, 8004e94 <pow+0x68>
 8004e64:	2200      	movs	r2, #0
 8004e66:	2300      	movs	r3, #0
 8004e68:	4620      	mov	r0, r4
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	f7fb fdd0 	bl	8000a10 <__aeabi_dcmpeq>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	d146      	bne.n	8004f02 <pow+0xd6>
 8004e74:	ec45 4b10 	vmov	d0, r4, r5
 8004e78:	f000 f848 	bl	8004f0c <finite>
 8004e7c:	b338      	cbz	r0, 8004ece <pow+0xa2>
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2300      	movs	r3, #0
 8004e82:	4620      	mov	r0, r4
 8004e84:	4629      	mov	r1, r5
 8004e86:	f7fb fdcd 	bl	8000a24 <__aeabi_dcmplt>
 8004e8a:	b300      	cbz	r0, 8004ece <pow+0xa2>
 8004e8c:	f7ff ffa4 	bl	8004dd8 <__errno>
 8004e90:	2322      	movs	r3, #34	@ 0x22
 8004e92:	e01b      	b.n	8004ecc <pow+0xa0>
 8004e94:	ec47 6b10 	vmov	d0, r6, r7
 8004e98:	f000 f838 	bl	8004f0c <finite>
 8004e9c:	b9e0      	cbnz	r0, 8004ed8 <pow+0xac>
 8004e9e:	eeb0 0a48 	vmov.f32	s0, s16
 8004ea2:	eef0 0a68 	vmov.f32	s1, s17
 8004ea6:	f000 f831 	bl	8004f0c <finite>
 8004eaa:	b1a8      	cbz	r0, 8004ed8 <pow+0xac>
 8004eac:	ec45 4b10 	vmov	d0, r4, r5
 8004eb0:	f000 f82c 	bl	8004f0c <finite>
 8004eb4:	b180      	cbz	r0, 8004ed8 <pow+0xac>
 8004eb6:	4632      	mov	r2, r6
 8004eb8:	463b      	mov	r3, r7
 8004eba:	4630      	mov	r0, r6
 8004ebc:	4639      	mov	r1, r7
 8004ebe:	f7fb fdd9 	bl	8000a74 <__aeabi_dcmpun>
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	d0e2      	beq.n	8004e8c <pow+0x60>
 8004ec6:	f7ff ff87 	bl	8004dd8 <__errno>
 8004eca:	2321      	movs	r3, #33	@ 0x21
 8004ecc:	6003      	str	r3, [r0, #0]
 8004ece:	ecbd 8b02 	vpop	{d8}
 8004ed2:	ec47 6b10 	vmov	d0, r6, r7
 8004ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2300      	movs	r3, #0
 8004edc:	4630      	mov	r0, r6
 8004ede:	4639      	mov	r1, r7
 8004ee0:	f7fb fd96 	bl	8000a10 <__aeabi_dcmpeq>
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	d0f2      	beq.n	8004ece <pow+0xa2>
 8004ee8:	eeb0 0a48 	vmov.f32	s0, s16
 8004eec:	eef0 0a68 	vmov.f32	s1, s17
 8004ef0:	f000 f80c 	bl	8004f0c <finite>
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	d0ea      	beq.n	8004ece <pow+0xa2>
 8004ef8:	ec45 4b10 	vmov	d0, r4, r5
 8004efc:	f000 f806 	bl	8004f0c <finite>
 8004f00:	e7c3      	b.n	8004e8a <pow+0x5e>
 8004f02:	4f01      	ldr	r7, [pc, #4]	@ (8004f08 <pow+0xdc>)
 8004f04:	2600      	movs	r6, #0
 8004f06:	e7e2      	b.n	8004ece <pow+0xa2>
 8004f08:	3ff00000 	.word	0x3ff00000

08004f0c <finite>:
 8004f0c:	b082      	sub	sp, #8
 8004f0e:	ed8d 0b00 	vstr	d0, [sp]
 8004f12:	9801      	ldr	r0, [sp, #4]
 8004f14:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8004f18:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8004f1c:	0fc0      	lsrs	r0, r0, #31
 8004f1e:	b002      	add	sp, #8
 8004f20:	4770      	bx	lr
 8004f22:	0000      	movs	r0, r0
 8004f24:	0000      	movs	r0, r0
	...

08004f28 <__ieee754_pow>:
 8004f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f2c:	b091      	sub	sp, #68	@ 0x44
 8004f2e:	ed8d 1b00 	vstr	d1, [sp]
 8004f32:	e9dd 1900 	ldrd	r1, r9, [sp]
 8004f36:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8004f3a:	ea5a 0001 	orrs.w	r0, sl, r1
 8004f3e:	ec57 6b10 	vmov	r6, r7, d0
 8004f42:	d113      	bne.n	8004f6c <__ieee754_pow+0x44>
 8004f44:	19b3      	adds	r3, r6, r6
 8004f46:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8004f4a:	4152      	adcs	r2, r2
 8004f4c:	4298      	cmp	r0, r3
 8004f4e:	4b98      	ldr	r3, [pc, #608]	@ (80051b0 <__ieee754_pow+0x288>)
 8004f50:	4193      	sbcs	r3, r2
 8004f52:	f080 84ea 	bcs.w	800592a <__ieee754_pow+0xa02>
 8004f56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	4639      	mov	r1, r7
 8004f5e:	f7fb f939 	bl	80001d4 <__adddf3>
 8004f62:	ec41 0b10 	vmov	d0, r0, r1
 8004f66:	b011      	add	sp, #68	@ 0x44
 8004f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f6c:	4a91      	ldr	r2, [pc, #580]	@ (80051b4 <__ieee754_pow+0x28c>)
 8004f6e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004f72:	4590      	cmp	r8, r2
 8004f74:	463d      	mov	r5, r7
 8004f76:	4633      	mov	r3, r6
 8004f78:	d806      	bhi.n	8004f88 <__ieee754_pow+0x60>
 8004f7a:	d101      	bne.n	8004f80 <__ieee754_pow+0x58>
 8004f7c:	2e00      	cmp	r6, #0
 8004f7e:	d1ea      	bne.n	8004f56 <__ieee754_pow+0x2e>
 8004f80:	4592      	cmp	sl, r2
 8004f82:	d801      	bhi.n	8004f88 <__ieee754_pow+0x60>
 8004f84:	d10e      	bne.n	8004fa4 <__ieee754_pow+0x7c>
 8004f86:	b169      	cbz	r1, 8004fa4 <__ieee754_pow+0x7c>
 8004f88:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8004f8c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8004f90:	431d      	orrs	r5, r3
 8004f92:	d1e0      	bne.n	8004f56 <__ieee754_pow+0x2e>
 8004f94:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004f98:	18db      	adds	r3, r3, r3
 8004f9a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8004f9e:	4152      	adcs	r2, r2
 8004fa0:	429d      	cmp	r5, r3
 8004fa2:	e7d4      	b.n	8004f4e <__ieee754_pow+0x26>
 8004fa4:	2d00      	cmp	r5, #0
 8004fa6:	46c3      	mov	fp, r8
 8004fa8:	da3a      	bge.n	8005020 <__ieee754_pow+0xf8>
 8004faa:	4a83      	ldr	r2, [pc, #524]	@ (80051b8 <__ieee754_pow+0x290>)
 8004fac:	4592      	cmp	sl, r2
 8004fae:	d84d      	bhi.n	800504c <__ieee754_pow+0x124>
 8004fb0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8004fb4:	4592      	cmp	sl, r2
 8004fb6:	f240 84c7 	bls.w	8005948 <__ieee754_pow+0xa20>
 8004fba:	ea4f 522a 	mov.w	r2, sl, asr #20
 8004fbe:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8004fc2:	2a14      	cmp	r2, #20
 8004fc4:	dd0f      	ble.n	8004fe6 <__ieee754_pow+0xbe>
 8004fc6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8004fca:	fa21 f402 	lsr.w	r4, r1, r2
 8004fce:	fa04 f202 	lsl.w	r2, r4, r2
 8004fd2:	428a      	cmp	r2, r1
 8004fd4:	f040 84b8 	bne.w	8005948 <__ieee754_pow+0xa20>
 8004fd8:	f004 0401 	and.w	r4, r4, #1
 8004fdc:	f1c4 0402 	rsb	r4, r4, #2
 8004fe0:	2900      	cmp	r1, #0
 8004fe2:	d158      	bne.n	8005096 <__ieee754_pow+0x16e>
 8004fe4:	e00e      	b.n	8005004 <__ieee754_pow+0xdc>
 8004fe6:	2900      	cmp	r1, #0
 8004fe8:	d154      	bne.n	8005094 <__ieee754_pow+0x16c>
 8004fea:	f1c2 0214 	rsb	r2, r2, #20
 8004fee:	fa4a f402 	asr.w	r4, sl, r2
 8004ff2:	fa04 f202 	lsl.w	r2, r4, r2
 8004ff6:	4552      	cmp	r2, sl
 8004ff8:	f040 84a3 	bne.w	8005942 <__ieee754_pow+0xa1a>
 8004ffc:	f004 0401 	and.w	r4, r4, #1
 8005000:	f1c4 0402 	rsb	r4, r4, #2
 8005004:	4a6d      	ldr	r2, [pc, #436]	@ (80051bc <__ieee754_pow+0x294>)
 8005006:	4592      	cmp	sl, r2
 8005008:	d12e      	bne.n	8005068 <__ieee754_pow+0x140>
 800500a:	f1b9 0f00 	cmp.w	r9, #0
 800500e:	f280 8494 	bge.w	800593a <__ieee754_pow+0xa12>
 8005012:	496a      	ldr	r1, [pc, #424]	@ (80051bc <__ieee754_pow+0x294>)
 8005014:	4632      	mov	r2, r6
 8005016:	463b      	mov	r3, r7
 8005018:	2000      	movs	r0, #0
 800501a:	f7fb fbbb 	bl	8000794 <__aeabi_ddiv>
 800501e:	e7a0      	b.n	8004f62 <__ieee754_pow+0x3a>
 8005020:	2400      	movs	r4, #0
 8005022:	bbc1      	cbnz	r1, 8005096 <__ieee754_pow+0x16e>
 8005024:	4a63      	ldr	r2, [pc, #396]	@ (80051b4 <__ieee754_pow+0x28c>)
 8005026:	4592      	cmp	sl, r2
 8005028:	d1ec      	bne.n	8005004 <__ieee754_pow+0xdc>
 800502a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800502e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8005032:	431a      	orrs	r2, r3
 8005034:	f000 8479 	beq.w	800592a <__ieee754_pow+0xa02>
 8005038:	4b61      	ldr	r3, [pc, #388]	@ (80051c0 <__ieee754_pow+0x298>)
 800503a:	4598      	cmp	r8, r3
 800503c:	d908      	bls.n	8005050 <__ieee754_pow+0x128>
 800503e:	f1b9 0f00 	cmp.w	r9, #0
 8005042:	f2c0 8476 	blt.w	8005932 <__ieee754_pow+0xa0a>
 8005046:	e9dd 0100 	ldrd	r0, r1, [sp]
 800504a:	e78a      	b.n	8004f62 <__ieee754_pow+0x3a>
 800504c:	2402      	movs	r4, #2
 800504e:	e7e8      	b.n	8005022 <__ieee754_pow+0xfa>
 8005050:	f1b9 0f00 	cmp.w	r9, #0
 8005054:	f04f 0000 	mov.w	r0, #0
 8005058:	f04f 0100 	mov.w	r1, #0
 800505c:	da81      	bge.n	8004f62 <__ieee754_pow+0x3a>
 800505e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005062:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005066:	e77c      	b.n	8004f62 <__ieee754_pow+0x3a>
 8005068:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800506c:	d106      	bne.n	800507c <__ieee754_pow+0x154>
 800506e:	4632      	mov	r2, r6
 8005070:	463b      	mov	r3, r7
 8005072:	4630      	mov	r0, r6
 8005074:	4639      	mov	r1, r7
 8005076:	f7fb fa63 	bl	8000540 <__aeabi_dmul>
 800507a:	e772      	b.n	8004f62 <__ieee754_pow+0x3a>
 800507c:	4a51      	ldr	r2, [pc, #324]	@ (80051c4 <__ieee754_pow+0x29c>)
 800507e:	4591      	cmp	r9, r2
 8005080:	d109      	bne.n	8005096 <__ieee754_pow+0x16e>
 8005082:	2d00      	cmp	r5, #0
 8005084:	db07      	blt.n	8005096 <__ieee754_pow+0x16e>
 8005086:	ec47 6b10 	vmov	d0, r6, r7
 800508a:	b011      	add	sp, #68	@ 0x44
 800508c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005090:	f000 bd52 	b.w	8005b38 <__ieee754_sqrt>
 8005094:	2400      	movs	r4, #0
 8005096:	ec47 6b10 	vmov	d0, r6, r7
 800509a:	9302      	str	r3, [sp, #8]
 800509c:	f000 fc88 	bl	80059b0 <fabs>
 80050a0:	9b02      	ldr	r3, [sp, #8]
 80050a2:	ec51 0b10 	vmov	r0, r1, d0
 80050a6:	bb53      	cbnz	r3, 80050fe <__ieee754_pow+0x1d6>
 80050a8:	4b44      	ldr	r3, [pc, #272]	@ (80051bc <__ieee754_pow+0x294>)
 80050aa:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d002      	beq.n	80050b8 <__ieee754_pow+0x190>
 80050b2:	f1b8 0f00 	cmp.w	r8, #0
 80050b6:	d122      	bne.n	80050fe <__ieee754_pow+0x1d6>
 80050b8:	f1b9 0f00 	cmp.w	r9, #0
 80050bc:	da05      	bge.n	80050ca <__ieee754_pow+0x1a2>
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	2000      	movs	r0, #0
 80050c4:	493d      	ldr	r1, [pc, #244]	@ (80051bc <__ieee754_pow+0x294>)
 80050c6:	f7fb fb65 	bl	8000794 <__aeabi_ddiv>
 80050ca:	2d00      	cmp	r5, #0
 80050cc:	f6bf af49 	bge.w	8004f62 <__ieee754_pow+0x3a>
 80050d0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80050d4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80050d8:	ea58 0804 	orrs.w	r8, r8, r4
 80050dc:	d108      	bne.n	80050f0 <__ieee754_pow+0x1c8>
 80050de:	4602      	mov	r2, r0
 80050e0:	460b      	mov	r3, r1
 80050e2:	4610      	mov	r0, r2
 80050e4:	4619      	mov	r1, r3
 80050e6:	f7fb f873 	bl	80001d0 <__aeabi_dsub>
 80050ea:	4602      	mov	r2, r0
 80050ec:	460b      	mov	r3, r1
 80050ee:	e794      	b.n	800501a <__ieee754_pow+0xf2>
 80050f0:	2c01      	cmp	r4, #1
 80050f2:	f47f af36 	bne.w	8004f62 <__ieee754_pow+0x3a>
 80050f6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80050fa:	4619      	mov	r1, r3
 80050fc:	e731      	b.n	8004f62 <__ieee754_pow+0x3a>
 80050fe:	0feb      	lsrs	r3, r5, #31
 8005100:	3b01      	subs	r3, #1
 8005102:	ea53 0204 	orrs.w	r2, r3, r4
 8005106:	d102      	bne.n	800510e <__ieee754_pow+0x1e6>
 8005108:	4632      	mov	r2, r6
 800510a:	463b      	mov	r3, r7
 800510c:	e7e9      	b.n	80050e2 <__ieee754_pow+0x1ba>
 800510e:	3c01      	subs	r4, #1
 8005110:	431c      	orrs	r4, r3
 8005112:	d016      	beq.n	8005142 <__ieee754_pow+0x21a>
 8005114:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80051a0 <__ieee754_pow+0x278>
 8005118:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800511c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005120:	f240 8112 	bls.w	8005348 <__ieee754_pow+0x420>
 8005124:	4b28      	ldr	r3, [pc, #160]	@ (80051c8 <__ieee754_pow+0x2a0>)
 8005126:	459a      	cmp	sl, r3
 8005128:	4b25      	ldr	r3, [pc, #148]	@ (80051c0 <__ieee754_pow+0x298>)
 800512a:	d916      	bls.n	800515a <__ieee754_pow+0x232>
 800512c:	4598      	cmp	r8, r3
 800512e:	d80b      	bhi.n	8005148 <__ieee754_pow+0x220>
 8005130:	f1b9 0f00 	cmp.w	r9, #0
 8005134:	da0b      	bge.n	800514e <__ieee754_pow+0x226>
 8005136:	2000      	movs	r0, #0
 8005138:	b011      	add	sp, #68	@ 0x44
 800513a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513e:	f000 bcf3 	b.w	8005b28 <__math_oflow>
 8005142:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80051a8 <__ieee754_pow+0x280>
 8005146:	e7e7      	b.n	8005118 <__ieee754_pow+0x1f0>
 8005148:	f1b9 0f00 	cmp.w	r9, #0
 800514c:	dcf3      	bgt.n	8005136 <__ieee754_pow+0x20e>
 800514e:	2000      	movs	r0, #0
 8005150:	b011      	add	sp, #68	@ 0x44
 8005152:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005156:	f000 bcdf 	b.w	8005b18 <__math_uflow>
 800515a:	4598      	cmp	r8, r3
 800515c:	d20c      	bcs.n	8005178 <__ieee754_pow+0x250>
 800515e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005162:	2200      	movs	r2, #0
 8005164:	2300      	movs	r3, #0
 8005166:	f7fb fc5d 	bl	8000a24 <__aeabi_dcmplt>
 800516a:	3800      	subs	r0, #0
 800516c:	bf18      	it	ne
 800516e:	2001      	movne	r0, #1
 8005170:	f1b9 0f00 	cmp.w	r9, #0
 8005174:	daec      	bge.n	8005150 <__ieee754_pow+0x228>
 8005176:	e7df      	b.n	8005138 <__ieee754_pow+0x210>
 8005178:	4b10      	ldr	r3, [pc, #64]	@ (80051bc <__ieee754_pow+0x294>)
 800517a:	4598      	cmp	r8, r3
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	d924      	bls.n	80051cc <__ieee754_pow+0x2a4>
 8005182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005186:	2300      	movs	r3, #0
 8005188:	f7fb fc4c 	bl	8000a24 <__aeabi_dcmplt>
 800518c:	3800      	subs	r0, #0
 800518e:	bf18      	it	ne
 8005190:	2001      	movne	r0, #1
 8005192:	f1b9 0f00 	cmp.w	r9, #0
 8005196:	dccf      	bgt.n	8005138 <__ieee754_pow+0x210>
 8005198:	e7da      	b.n	8005150 <__ieee754_pow+0x228>
 800519a:	bf00      	nop
 800519c:	f3af 8000 	nop.w
 80051a0:	00000000 	.word	0x00000000
 80051a4:	3ff00000 	.word	0x3ff00000
 80051a8:	00000000 	.word	0x00000000
 80051ac:	bff00000 	.word	0xbff00000
 80051b0:	fff00000 	.word	0xfff00000
 80051b4:	7ff00000 	.word	0x7ff00000
 80051b8:	433fffff 	.word	0x433fffff
 80051bc:	3ff00000 	.word	0x3ff00000
 80051c0:	3fefffff 	.word	0x3fefffff
 80051c4:	3fe00000 	.word	0x3fe00000
 80051c8:	43f00000 	.word	0x43f00000
 80051cc:	4b5a      	ldr	r3, [pc, #360]	@ (8005338 <__ieee754_pow+0x410>)
 80051ce:	f7fa ffff 	bl	80001d0 <__aeabi_dsub>
 80051d2:	a351      	add	r3, pc, #324	@ (adr r3, 8005318 <__ieee754_pow+0x3f0>)
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	4604      	mov	r4, r0
 80051da:	460d      	mov	r5, r1
 80051dc:	f7fb f9b0 	bl	8000540 <__aeabi_dmul>
 80051e0:	a34f      	add	r3, pc, #316	@ (adr r3, 8005320 <__ieee754_pow+0x3f8>)
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	4606      	mov	r6, r0
 80051e8:	460f      	mov	r7, r1
 80051ea:	4620      	mov	r0, r4
 80051ec:	4629      	mov	r1, r5
 80051ee:	f7fb f9a7 	bl	8000540 <__aeabi_dmul>
 80051f2:	4b52      	ldr	r3, [pc, #328]	@ (800533c <__ieee754_pow+0x414>)
 80051f4:	4682      	mov	sl, r0
 80051f6:	468b      	mov	fp, r1
 80051f8:	2200      	movs	r2, #0
 80051fa:	4620      	mov	r0, r4
 80051fc:	4629      	mov	r1, r5
 80051fe:	f7fb f99f 	bl	8000540 <__aeabi_dmul>
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	a148      	add	r1, pc, #288	@ (adr r1, 8005328 <__ieee754_pow+0x400>)
 8005208:	e9d1 0100 	ldrd	r0, r1, [r1]
 800520c:	f7fa ffe0 	bl	80001d0 <__aeabi_dsub>
 8005210:	4622      	mov	r2, r4
 8005212:	462b      	mov	r3, r5
 8005214:	f7fb f994 	bl	8000540 <__aeabi_dmul>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	2000      	movs	r0, #0
 800521e:	4948      	ldr	r1, [pc, #288]	@ (8005340 <__ieee754_pow+0x418>)
 8005220:	f7fa ffd6 	bl	80001d0 <__aeabi_dsub>
 8005224:	4622      	mov	r2, r4
 8005226:	4680      	mov	r8, r0
 8005228:	4689      	mov	r9, r1
 800522a:	462b      	mov	r3, r5
 800522c:	4620      	mov	r0, r4
 800522e:	4629      	mov	r1, r5
 8005230:	f7fb f986 	bl	8000540 <__aeabi_dmul>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4640      	mov	r0, r8
 800523a:	4649      	mov	r1, r9
 800523c:	f7fb f980 	bl	8000540 <__aeabi_dmul>
 8005240:	a33b      	add	r3, pc, #236	@ (adr r3, 8005330 <__ieee754_pow+0x408>)
 8005242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005246:	f7fb f97b 	bl	8000540 <__aeabi_dmul>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	4650      	mov	r0, sl
 8005250:	4659      	mov	r1, fp
 8005252:	f7fa ffbd 	bl	80001d0 <__aeabi_dsub>
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	4680      	mov	r8, r0
 800525c:	4689      	mov	r9, r1
 800525e:	4630      	mov	r0, r6
 8005260:	4639      	mov	r1, r7
 8005262:	f7fa ffb7 	bl	80001d4 <__adddf3>
 8005266:	2400      	movs	r4, #0
 8005268:	4632      	mov	r2, r6
 800526a:	463b      	mov	r3, r7
 800526c:	4620      	mov	r0, r4
 800526e:	460d      	mov	r5, r1
 8005270:	f7fa ffae 	bl	80001d0 <__aeabi_dsub>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4640      	mov	r0, r8
 800527a:	4649      	mov	r1, r9
 800527c:	f7fa ffa8 	bl	80001d0 <__aeabi_dsub>
 8005280:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005284:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005288:	2300      	movs	r3, #0
 800528a:	9304      	str	r3, [sp, #16]
 800528c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005290:	4606      	mov	r6, r0
 8005292:	460f      	mov	r7, r1
 8005294:	4652      	mov	r2, sl
 8005296:	465b      	mov	r3, fp
 8005298:	e9dd 0100 	ldrd	r0, r1, [sp]
 800529c:	f7fa ff98 	bl	80001d0 <__aeabi_dsub>
 80052a0:	4622      	mov	r2, r4
 80052a2:	462b      	mov	r3, r5
 80052a4:	f7fb f94c 	bl	8000540 <__aeabi_dmul>
 80052a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80052ac:	4680      	mov	r8, r0
 80052ae:	4689      	mov	r9, r1
 80052b0:	4630      	mov	r0, r6
 80052b2:	4639      	mov	r1, r7
 80052b4:	f7fb f944 	bl	8000540 <__aeabi_dmul>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4640      	mov	r0, r8
 80052be:	4649      	mov	r1, r9
 80052c0:	f7fa ff88 	bl	80001d4 <__adddf3>
 80052c4:	4652      	mov	r2, sl
 80052c6:	465b      	mov	r3, fp
 80052c8:	4606      	mov	r6, r0
 80052ca:	460f      	mov	r7, r1
 80052cc:	4620      	mov	r0, r4
 80052ce:	4629      	mov	r1, r5
 80052d0:	f7fb f936 	bl	8000540 <__aeabi_dmul>
 80052d4:	460b      	mov	r3, r1
 80052d6:	4602      	mov	r2, r0
 80052d8:	4680      	mov	r8, r0
 80052da:	4689      	mov	r9, r1
 80052dc:	4630      	mov	r0, r6
 80052de:	4639      	mov	r1, r7
 80052e0:	f7fa ff78 	bl	80001d4 <__adddf3>
 80052e4:	4b17      	ldr	r3, [pc, #92]	@ (8005344 <__ieee754_pow+0x41c>)
 80052e6:	4299      	cmp	r1, r3
 80052e8:	4604      	mov	r4, r0
 80052ea:	460d      	mov	r5, r1
 80052ec:	468a      	mov	sl, r1
 80052ee:	468b      	mov	fp, r1
 80052f0:	f340 82ef 	ble.w	80058d2 <__ieee754_pow+0x9aa>
 80052f4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80052f8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80052fc:	4303      	orrs	r3, r0
 80052fe:	f000 81e8 	beq.w	80056d2 <__ieee754_pow+0x7aa>
 8005302:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005306:	2200      	movs	r2, #0
 8005308:	2300      	movs	r3, #0
 800530a:	f7fb fb8b 	bl	8000a24 <__aeabi_dcmplt>
 800530e:	3800      	subs	r0, #0
 8005310:	bf18      	it	ne
 8005312:	2001      	movne	r0, #1
 8005314:	e710      	b.n	8005138 <__ieee754_pow+0x210>
 8005316:	bf00      	nop
 8005318:	60000000 	.word	0x60000000
 800531c:	3ff71547 	.word	0x3ff71547
 8005320:	f85ddf44 	.word	0xf85ddf44
 8005324:	3e54ae0b 	.word	0x3e54ae0b
 8005328:	55555555 	.word	0x55555555
 800532c:	3fd55555 	.word	0x3fd55555
 8005330:	652b82fe 	.word	0x652b82fe
 8005334:	3ff71547 	.word	0x3ff71547
 8005338:	3ff00000 	.word	0x3ff00000
 800533c:	3fd00000 	.word	0x3fd00000
 8005340:	3fe00000 	.word	0x3fe00000
 8005344:	408fffff 	.word	0x408fffff
 8005348:	4bd5      	ldr	r3, [pc, #852]	@ (80056a0 <__ieee754_pow+0x778>)
 800534a:	402b      	ands	r3, r5
 800534c:	2200      	movs	r2, #0
 800534e:	b92b      	cbnz	r3, 800535c <__ieee754_pow+0x434>
 8005350:	4bd4      	ldr	r3, [pc, #848]	@ (80056a4 <__ieee754_pow+0x77c>)
 8005352:	f7fb f8f5 	bl	8000540 <__aeabi_dmul>
 8005356:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800535a:	468b      	mov	fp, r1
 800535c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8005360:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8005364:	4413      	add	r3, r2
 8005366:	930a      	str	r3, [sp, #40]	@ 0x28
 8005368:	4bcf      	ldr	r3, [pc, #828]	@ (80056a8 <__ieee754_pow+0x780>)
 800536a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800536e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8005372:	459b      	cmp	fp, r3
 8005374:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8005378:	dd08      	ble.n	800538c <__ieee754_pow+0x464>
 800537a:	4bcc      	ldr	r3, [pc, #816]	@ (80056ac <__ieee754_pow+0x784>)
 800537c:	459b      	cmp	fp, r3
 800537e:	f340 81a5 	ble.w	80056cc <__ieee754_pow+0x7a4>
 8005382:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005384:	3301      	adds	r3, #1
 8005386:	930a      	str	r3, [sp, #40]	@ 0x28
 8005388:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800538c:	f04f 0a00 	mov.w	sl, #0
 8005390:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8005394:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005396:	4bc6      	ldr	r3, [pc, #792]	@ (80056b0 <__ieee754_pow+0x788>)
 8005398:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800539c:	ed93 7b00 	vldr	d7, [r3]
 80053a0:	4629      	mov	r1, r5
 80053a2:	ec53 2b17 	vmov	r2, r3, d7
 80053a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80053aa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80053ae:	f7fa ff0f 	bl	80001d0 <__aeabi_dsub>
 80053b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80053b6:	4606      	mov	r6, r0
 80053b8:	460f      	mov	r7, r1
 80053ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053be:	f7fa ff09 	bl	80001d4 <__adddf3>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	2000      	movs	r0, #0
 80053c8:	49ba      	ldr	r1, [pc, #744]	@ (80056b4 <__ieee754_pow+0x78c>)
 80053ca:	f7fb f9e3 	bl	8000794 <__aeabi_ddiv>
 80053ce:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4630      	mov	r0, r6
 80053d8:	4639      	mov	r1, r7
 80053da:	f7fb f8b1 	bl	8000540 <__aeabi_dmul>
 80053de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053e2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80053e6:	106d      	asrs	r5, r5, #1
 80053e8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80053ec:	f04f 0b00 	mov.w	fp, #0
 80053f0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80053f4:	4661      	mov	r1, ip
 80053f6:	2200      	movs	r2, #0
 80053f8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80053fc:	4658      	mov	r0, fp
 80053fe:	46e1      	mov	r9, ip
 8005400:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8005404:	4614      	mov	r4, r2
 8005406:	461d      	mov	r5, r3
 8005408:	f7fb f89a 	bl	8000540 <__aeabi_dmul>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4630      	mov	r0, r6
 8005412:	4639      	mov	r1, r7
 8005414:	f7fa fedc 	bl	80001d0 <__aeabi_dsub>
 8005418:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800541c:	4606      	mov	r6, r0
 800541e:	460f      	mov	r7, r1
 8005420:	4620      	mov	r0, r4
 8005422:	4629      	mov	r1, r5
 8005424:	f7fa fed4 	bl	80001d0 <__aeabi_dsub>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005430:	f7fa fece 	bl	80001d0 <__aeabi_dsub>
 8005434:	465a      	mov	r2, fp
 8005436:	464b      	mov	r3, r9
 8005438:	f7fb f882 	bl	8000540 <__aeabi_dmul>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4630      	mov	r0, r6
 8005442:	4639      	mov	r1, r7
 8005444:	f7fa fec4 	bl	80001d0 <__aeabi_dsub>
 8005448:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800544c:	f7fb f878 	bl	8000540 <__aeabi_dmul>
 8005450:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005454:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005458:	4610      	mov	r0, r2
 800545a:	4619      	mov	r1, r3
 800545c:	f7fb f870 	bl	8000540 <__aeabi_dmul>
 8005460:	a37d      	add	r3, pc, #500	@ (adr r3, 8005658 <__ieee754_pow+0x730>)
 8005462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005466:	4604      	mov	r4, r0
 8005468:	460d      	mov	r5, r1
 800546a:	f7fb f869 	bl	8000540 <__aeabi_dmul>
 800546e:	a37c      	add	r3, pc, #496	@ (adr r3, 8005660 <__ieee754_pow+0x738>)
 8005470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005474:	f7fa feae 	bl	80001d4 <__adddf3>
 8005478:	4622      	mov	r2, r4
 800547a:	462b      	mov	r3, r5
 800547c:	f7fb f860 	bl	8000540 <__aeabi_dmul>
 8005480:	a379      	add	r3, pc, #484	@ (adr r3, 8005668 <__ieee754_pow+0x740>)
 8005482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005486:	f7fa fea5 	bl	80001d4 <__adddf3>
 800548a:	4622      	mov	r2, r4
 800548c:	462b      	mov	r3, r5
 800548e:	f7fb f857 	bl	8000540 <__aeabi_dmul>
 8005492:	a377      	add	r3, pc, #476	@ (adr r3, 8005670 <__ieee754_pow+0x748>)
 8005494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005498:	f7fa fe9c 	bl	80001d4 <__adddf3>
 800549c:	4622      	mov	r2, r4
 800549e:	462b      	mov	r3, r5
 80054a0:	f7fb f84e 	bl	8000540 <__aeabi_dmul>
 80054a4:	a374      	add	r3, pc, #464	@ (adr r3, 8005678 <__ieee754_pow+0x750>)
 80054a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054aa:	f7fa fe93 	bl	80001d4 <__adddf3>
 80054ae:	4622      	mov	r2, r4
 80054b0:	462b      	mov	r3, r5
 80054b2:	f7fb f845 	bl	8000540 <__aeabi_dmul>
 80054b6:	a372      	add	r3, pc, #456	@ (adr r3, 8005680 <__ieee754_pow+0x758>)
 80054b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054bc:	f7fa fe8a 	bl	80001d4 <__adddf3>
 80054c0:	4622      	mov	r2, r4
 80054c2:	4606      	mov	r6, r0
 80054c4:	460f      	mov	r7, r1
 80054c6:	462b      	mov	r3, r5
 80054c8:	4620      	mov	r0, r4
 80054ca:	4629      	mov	r1, r5
 80054cc:	f7fb f838 	bl	8000540 <__aeabi_dmul>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	4630      	mov	r0, r6
 80054d6:	4639      	mov	r1, r7
 80054d8:	f7fb f832 	bl	8000540 <__aeabi_dmul>
 80054dc:	465a      	mov	r2, fp
 80054de:	4604      	mov	r4, r0
 80054e0:	460d      	mov	r5, r1
 80054e2:	464b      	mov	r3, r9
 80054e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054e8:	f7fa fe74 	bl	80001d4 <__adddf3>
 80054ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054f0:	f7fb f826 	bl	8000540 <__aeabi_dmul>
 80054f4:	4622      	mov	r2, r4
 80054f6:	462b      	mov	r3, r5
 80054f8:	f7fa fe6c 	bl	80001d4 <__adddf3>
 80054fc:	465a      	mov	r2, fp
 80054fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005502:	464b      	mov	r3, r9
 8005504:	4658      	mov	r0, fp
 8005506:	4649      	mov	r1, r9
 8005508:	f7fb f81a 	bl	8000540 <__aeabi_dmul>
 800550c:	4b6a      	ldr	r3, [pc, #424]	@ (80056b8 <__ieee754_pow+0x790>)
 800550e:	2200      	movs	r2, #0
 8005510:	4606      	mov	r6, r0
 8005512:	460f      	mov	r7, r1
 8005514:	f7fa fe5e 	bl	80001d4 <__adddf3>
 8005518:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800551c:	f7fa fe5a 	bl	80001d4 <__adddf3>
 8005520:	46d8      	mov	r8, fp
 8005522:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8005526:	460d      	mov	r5, r1
 8005528:	465a      	mov	r2, fp
 800552a:	460b      	mov	r3, r1
 800552c:	4640      	mov	r0, r8
 800552e:	4649      	mov	r1, r9
 8005530:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8005534:	f7fb f804 	bl	8000540 <__aeabi_dmul>
 8005538:	465c      	mov	r4, fp
 800553a:	4680      	mov	r8, r0
 800553c:	4689      	mov	r9, r1
 800553e:	4b5e      	ldr	r3, [pc, #376]	@ (80056b8 <__ieee754_pow+0x790>)
 8005540:	2200      	movs	r2, #0
 8005542:	4620      	mov	r0, r4
 8005544:	4629      	mov	r1, r5
 8005546:	f7fa fe43 	bl	80001d0 <__aeabi_dsub>
 800554a:	4632      	mov	r2, r6
 800554c:	463b      	mov	r3, r7
 800554e:	f7fa fe3f 	bl	80001d0 <__aeabi_dsub>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800555a:	f7fa fe39 	bl	80001d0 <__aeabi_dsub>
 800555e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005562:	f7fa ffed 	bl	8000540 <__aeabi_dmul>
 8005566:	4622      	mov	r2, r4
 8005568:	4606      	mov	r6, r0
 800556a:	460f      	mov	r7, r1
 800556c:	462b      	mov	r3, r5
 800556e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005572:	f7fa ffe5 	bl	8000540 <__aeabi_dmul>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	4630      	mov	r0, r6
 800557c:	4639      	mov	r1, r7
 800557e:	f7fa fe29 	bl	80001d4 <__adddf3>
 8005582:	4606      	mov	r6, r0
 8005584:	460f      	mov	r7, r1
 8005586:	4602      	mov	r2, r0
 8005588:	460b      	mov	r3, r1
 800558a:	4640      	mov	r0, r8
 800558c:	4649      	mov	r1, r9
 800558e:	f7fa fe21 	bl	80001d4 <__adddf3>
 8005592:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8005596:	a33c      	add	r3, pc, #240	@ (adr r3, 8005688 <__ieee754_pow+0x760>)
 8005598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559c:	4658      	mov	r0, fp
 800559e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80055a2:	460d      	mov	r5, r1
 80055a4:	f7fa ffcc 	bl	8000540 <__aeabi_dmul>
 80055a8:	465c      	mov	r4, fp
 80055aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055ae:	4642      	mov	r2, r8
 80055b0:	464b      	mov	r3, r9
 80055b2:	4620      	mov	r0, r4
 80055b4:	4629      	mov	r1, r5
 80055b6:	f7fa fe0b 	bl	80001d0 <__aeabi_dsub>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	4630      	mov	r0, r6
 80055c0:	4639      	mov	r1, r7
 80055c2:	f7fa fe05 	bl	80001d0 <__aeabi_dsub>
 80055c6:	a332      	add	r3, pc, #200	@ (adr r3, 8005690 <__ieee754_pow+0x768>)
 80055c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055cc:	f7fa ffb8 	bl	8000540 <__aeabi_dmul>
 80055d0:	a331      	add	r3, pc, #196	@ (adr r3, 8005698 <__ieee754_pow+0x770>)
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	4606      	mov	r6, r0
 80055d8:	460f      	mov	r7, r1
 80055da:	4620      	mov	r0, r4
 80055dc:	4629      	mov	r1, r5
 80055de:	f7fa ffaf 	bl	8000540 <__aeabi_dmul>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	4630      	mov	r0, r6
 80055e8:	4639      	mov	r1, r7
 80055ea:	f7fa fdf3 	bl	80001d4 <__adddf3>
 80055ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80055f0:	4b32      	ldr	r3, [pc, #200]	@ (80056bc <__ieee754_pow+0x794>)
 80055f2:	4413      	add	r3, r2
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	f7fa fdec 	bl	80001d4 <__adddf3>
 80055fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005600:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005602:	f7fa ff33 	bl	800046c <__aeabi_i2d>
 8005606:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005608:	4b2d      	ldr	r3, [pc, #180]	@ (80056c0 <__ieee754_pow+0x798>)
 800560a:	4413      	add	r3, r2
 800560c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005610:	4606      	mov	r6, r0
 8005612:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005616:	460f      	mov	r7, r1
 8005618:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800561c:	f7fa fdda 	bl	80001d4 <__adddf3>
 8005620:	4642      	mov	r2, r8
 8005622:	464b      	mov	r3, r9
 8005624:	f7fa fdd6 	bl	80001d4 <__adddf3>
 8005628:	4632      	mov	r2, r6
 800562a:	463b      	mov	r3, r7
 800562c:	f7fa fdd2 	bl	80001d4 <__adddf3>
 8005630:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8005634:	4632      	mov	r2, r6
 8005636:	463b      	mov	r3, r7
 8005638:	4658      	mov	r0, fp
 800563a:	460d      	mov	r5, r1
 800563c:	f7fa fdc8 	bl	80001d0 <__aeabi_dsub>
 8005640:	4642      	mov	r2, r8
 8005642:	464b      	mov	r3, r9
 8005644:	f7fa fdc4 	bl	80001d0 <__aeabi_dsub>
 8005648:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800564c:	f7fa fdc0 	bl	80001d0 <__aeabi_dsub>
 8005650:	465c      	mov	r4, fp
 8005652:	4602      	mov	r2, r0
 8005654:	e036      	b.n	80056c4 <__ieee754_pow+0x79c>
 8005656:	bf00      	nop
 8005658:	4a454eef 	.word	0x4a454eef
 800565c:	3fca7e28 	.word	0x3fca7e28
 8005660:	93c9db65 	.word	0x93c9db65
 8005664:	3fcd864a 	.word	0x3fcd864a
 8005668:	a91d4101 	.word	0xa91d4101
 800566c:	3fd17460 	.word	0x3fd17460
 8005670:	518f264d 	.word	0x518f264d
 8005674:	3fd55555 	.word	0x3fd55555
 8005678:	db6fabff 	.word	0xdb6fabff
 800567c:	3fdb6db6 	.word	0x3fdb6db6
 8005680:	33333303 	.word	0x33333303
 8005684:	3fe33333 	.word	0x3fe33333
 8005688:	e0000000 	.word	0xe0000000
 800568c:	3feec709 	.word	0x3feec709
 8005690:	dc3a03fd 	.word	0xdc3a03fd
 8005694:	3feec709 	.word	0x3feec709
 8005698:	145b01f5 	.word	0x145b01f5
 800569c:	be3e2fe0 	.word	0xbe3e2fe0
 80056a0:	7ff00000 	.word	0x7ff00000
 80056a4:	43400000 	.word	0x43400000
 80056a8:	0003988e 	.word	0x0003988e
 80056ac:	000bb679 	.word	0x000bb679
 80056b0:	08005d48 	.word	0x08005d48
 80056b4:	3ff00000 	.word	0x3ff00000
 80056b8:	40080000 	.word	0x40080000
 80056bc:	08005d28 	.word	0x08005d28
 80056c0:	08005d38 	.word	0x08005d38
 80056c4:	460b      	mov	r3, r1
 80056c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056ca:	e5d7      	b.n	800527c <__ieee754_pow+0x354>
 80056cc:	f04f 0a01 	mov.w	sl, #1
 80056d0:	e65e      	b.n	8005390 <__ieee754_pow+0x468>
 80056d2:	a3b4      	add	r3, pc, #720	@ (adr r3, 80059a4 <__ieee754_pow+0xa7c>)
 80056d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d8:	4630      	mov	r0, r6
 80056da:	4639      	mov	r1, r7
 80056dc:	f7fa fd7a 	bl	80001d4 <__adddf3>
 80056e0:	4642      	mov	r2, r8
 80056e2:	e9cd 0100 	strd	r0, r1, [sp]
 80056e6:	464b      	mov	r3, r9
 80056e8:	4620      	mov	r0, r4
 80056ea:	4629      	mov	r1, r5
 80056ec:	f7fa fd70 	bl	80001d0 <__aeabi_dsub>
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
 80056f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056f8:	f7fb f9b2 	bl	8000a60 <__aeabi_dcmpgt>
 80056fc:	2800      	cmp	r0, #0
 80056fe:	f47f ae00 	bne.w	8005302 <__ieee754_pow+0x3da>
 8005702:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8005706:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800570a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800570e:	fa43 fa0a 	asr.w	sl, r3, sl
 8005712:	44da      	add	sl, fp
 8005714:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005718:	489d      	ldr	r0, [pc, #628]	@ (8005990 <__ieee754_pow+0xa68>)
 800571a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800571e:	4108      	asrs	r0, r1
 8005720:	ea00 030a 	and.w	r3, r0, sl
 8005724:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8005728:	f1c1 0114 	rsb	r1, r1, #20
 800572c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8005730:	fa4a fa01 	asr.w	sl, sl, r1
 8005734:	f1bb 0f00 	cmp.w	fp, #0
 8005738:	4640      	mov	r0, r8
 800573a:	4649      	mov	r1, r9
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	bfb8      	it	lt
 8005742:	f1ca 0a00 	rsblt	sl, sl, #0
 8005746:	f7fa fd43 	bl	80001d0 <__aeabi_dsub>
 800574a:	4680      	mov	r8, r0
 800574c:	4689      	mov	r9, r1
 800574e:	4632      	mov	r2, r6
 8005750:	463b      	mov	r3, r7
 8005752:	4640      	mov	r0, r8
 8005754:	4649      	mov	r1, r9
 8005756:	f7fa fd3d 	bl	80001d4 <__adddf3>
 800575a:	2400      	movs	r4, #0
 800575c:	a37c      	add	r3, pc, #496	@ (adr r3, 8005950 <__ieee754_pow+0xa28>)
 800575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005762:	4620      	mov	r0, r4
 8005764:	460d      	mov	r5, r1
 8005766:	f7fa feeb 	bl	8000540 <__aeabi_dmul>
 800576a:	4642      	mov	r2, r8
 800576c:	e9cd 0100 	strd	r0, r1, [sp]
 8005770:	464b      	mov	r3, r9
 8005772:	4620      	mov	r0, r4
 8005774:	4629      	mov	r1, r5
 8005776:	f7fa fd2b 	bl	80001d0 <__aeabi_dsub>
 800577a:	4602      	mov	r2, r0
 800577c:	460b      	mov	r3, r1
 800577e:	4630      	mov	r0, r6
 8005780:	4639      	mov	r1, r7
 8005782:	f7fa fd25 	bl	80001d0 <__aeabi_dsub>
 8005786:	a374      	add	r3, pc, #464	@ (adr r3, 8005958 <__ieee754_pow+0xa30>)
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	f7fa fed8 	bl	8000540 <__aeabi_dmul>
 8005790:	a373      	add	r3, pc, #460	@ (adr r3, 8005960 <__ieee754_pow+0xa38>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	4680      	mov	r8, r0
 8005798:	4689      	mov	r9, r1
 800579a:	4620      	mov	r0, r4
 800579c:	4629      	mov	r1, r5
 800579e:	f7fa fecf 	bl	8000540 <__aeabi_dmul>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	4640      	mov	r0, r8
 80057a8:	4649      	mov	r1, r9
 80057aa:	f7fa fd13 	bl	80001d4 <__adddf3>
 80057ae:	4604      	mov	r4, r0
 80057b0:	460d      	mov	r5, r1
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057ba:	f7fa fd0b 	bl	80001d4 <__adddf3>
 80057be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057c2:	4680      	mov	r8, r0
 80057c4:	4689      	mov	r9, r1
 80057c6:	f7fa fd03 	bl	80001d0 <__aeabi_dsub>
 80057ca:	4602      	mov	r2, r0
 80057cc:	460b      	mov	r3, r1
 80057ce:	4620      	mov	r0, r4
 80057d0:	4629      	mov	r1, r5
 80057d2:	f7fa fcfd 	bl	80001d0 <__aeabi_dsub>
 80057d6:	4642      	mov	r2, r8
 80057d8:	4606      	mov	r6, r0
 80057da:	460f      	mov	r7, r1
 80057dc:	464b      	mov	r3, r9
 80057de:	4640      	mov	r0, r8
 80057e0:	4649      	mov	r1, r9
 80057e2:	f7fa fead 	bl	8000540 <__aeabi_dmul>
 80057e6:	a360      	add	r3, pc, #384	@ (adr r3, 8005968 <__ieee754_pow+0xa40>)
 80057e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ec:	4604      	mov	r4, r0
 80057ee:	460d      	mov	r5, r1
 80057f0:	f7fa fea6 	bl	8000540 <__aeabi_dmul>
 80057f4:	a35e      	add	r3, pc, #376	@ (adr r3, 8005970 <__ieee754_pow+0xa48>)
 80057f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fa:	f7fa fce9 	bl	80001d0 <__aeabi_dsub>
 80057fe:	4622      	mov	r2, r4
 8005800:	462b      	mov	r3, r5
 8005802:	f7fa fe9d 	bl	8000540 <__aeabi_dmul>
 8005806:	a35c      	add	r3, pc, #368	@ (adr r3, 8005978 <__ieee754_pow+0xa50>)
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	f7fa fce2 	bl	80001d4 <__adddf3>
 8005810:	4622      	mov	r2, r4
 8005812:	462b      	mov	r3, r5
 8005814:	f7fa fe94 	bl	8000540 <__aeabi_dmul>
 8005818:	a359      	add	r3, pc, #356	@ (adr r3, 8005980 <__ieee754_pow+0xa58>)
 800581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581e:	f7fa fcd7 	bl	80001d0 <__aeabi_dsub>
 8005822:	4622      	mov	r2, r4
 8005824:	462b      	mov	r3, r5
 8005826:	f7fa fe8b 	bl	8000540 <__aeabi_dmul>
 800582a:	a357      	add	r3, pc, #348	@ (adr r3, 8005988 <__ieee754_pow+0xa60>)
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	f7fa fcd0 	bl	80001d4 <__adddf3>
 8005834:	4622      	mov	r2, r4
 8005836:	462b      	mov	r3, r5
 8005838:	f7fa fe82 	bl	8000540 <__aeabi_dmul>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4640      	mov	r0, r8
 8005842:	4649      	mov	r1, r9
 8005844:	f7fa fcc4 	bl	80001d0 <__aeabi_dsub>
 8005848:	4604      	mov	r4, r0
 800584a:	460d      	mov	r5, r1
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	4640      	mov	r0, r8
 8005852:	4649      	mov	r1, r9
 8005854:	f7fa fe74 	bl	8000540 <__aeabi_dmul>
 8005858:	2200      	movs	r2, #0
 800585a:	e9cd 0100 	strd	r0, r1, [sp]
 800585e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005862:	4620      	mov	r0, r4
 8005864:	4629      	mov	r1, r5
 8005866:	f7fa fcb3 	bl	80001d0 <__aeabi_dsub>
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005872:	f7fa ff8f 	bl	8000794 <__aeabi_ddiv>
 8005876:	4632      	mov	r2, r6
 8005878:	4604      	mov	r4, r0
 800587a:	460d      	mov	r5, r1
 800587c:	463b      	mov	r3, r7
 800587e:	4640      	mov	r0, r8
 8005880:	4649      	mov	r1, r9
 8005882:	f7fa fe5d 	bl	8000540 <__aeabi_dmul>
 8005886:	4632      	mov	r2, r6
 8005888:	463b      	mov	r3, r7
 800588a:	f7fa fca3 	bl	80001d4 <__adddf3>
 800588e:	4602      	mov	r2, r0
 8005890:	460b      	mov	r3, r1
 8005892:	4620      	mov	r0, r4
 8005894:	4629      	mov	r1, r5
 8005896:	f7fa fc9b 	bl	80001d0 <__aeabi_dsub>
 800589a:	4642      	mov	r2, r8
 800589c:	464b      	mov	r3, r9
 800589e:	f7fa fc97 	bl	80001d0 <__aeabi_dsub>
 80058a2:	460b      	mov	r3, r1
 80058a4:	4602      	mov	r2, r0
 80058a6:	493b      	ldr	r1, [pc, #236]	@ (8005994 <__ieee754_pow+0xa6c>)
 80058a8:	2000      	movs	r0, #0
 80058aa:	f7fa fc91 	bl	80001d0 <__aeabi_dsub>
 80058ae:	ec41 0b10 	vmov	d0, r0, r1
 80058b2:	ee10 3a90 	vmov	r3, s1
 80058b6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80058ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058be:	da30      	bge.n	8005922 <__ieee754_pow+0x9fa>
 80058c0:	4650      	mov	r0, sl
 80058c2:	f000 f87d 	bl	80059c0 <scalbn>
 80058c6:	ec51 0b10 	vmov	r0, r1, d0
 80058ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058ce:	f7ff bbd2 	b.w	8005076 <__ieee754_pow+0x14e>
 80058d2:	4c31      	ldr	r4, [pc, #196]	@ (8005998 <__ieee754_pow+0xa70>)
 80058d4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80058d8:	42a3      	cmp	r3, r4
 80058da:	d91a      	bls.n	8005912 <__ieee754_pow+0x9ea>
 80058dc:	4b2f      	ldr	r3, [pc, #188]	@ (800599c <__ieee754_pow+0xa74>)
 80058de:	440b      	add	r3, r1
 80058e0:	4303      	orrs	r3, r0
 80058e2:	d009      	beq.n	80058f8 <__ieee754_pow+0x9d0>
 80058e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058e8:	2200      	movs	r2, #0
 80058ea:	2300      	movs	r3, #0
 80058ec:	f7fb f89a 	bl	8000a24 <__aeabi_dcmplt>
 80058f0:	3800      	subs	r0, #0
 80058f2:	bf18      	it	ne
 80058f4:	2001      	movne	r0, #1
 80058f6:	e42b      	b.n	8005150 <__ieee754_pow+0x228>
 80058f8:	4642      	mov	r2, r8
 80058fa:	464b      	mov	r3, r9
 80058fc:	f7fa fc68 	bl	80001d0 <__aeabi_dsub>
 8005900:	4632      	mov	r2, r6
 8005902:	463b      	mov	r3, r7
 8005904:	f7fb f8a2 	bl	8000a4c <__aeabi_dcmpge>
 8005908:	2800      	cmp	r0, #0
 800590a:	d1eb      	bne.n	80058e4 <__ieee754_pow+0x9bc>
 800590c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80059ac <__ieee754_pow+0xa84>
 8005910:	e6f7      	b.n	8005702 <__ieee754_pow+0x7da>
 8005912:	469a      	mov	sl, r3
 8005914:	4b22      	ldr	r3, [pc, #136]	@ (80059a0 <__ieee754_pow+0xa78>)
 8005916:	459a      	cmp	sl, r3
 8005918:	f63f aef3 	bhi.w	8005702 <__ieee754_pow+0x7da>
 800591c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8005920:	e715      	b.n	800574e <__ieee754_pow+0x826>
 8005922:	ec51 0b10 	vmov	r0, r1, d0
 8005926:	4619      	mov	r1, r3
 8005928:	e7cf      	b.n	80058ca <__ieee754_pow+0x9a2>
 800592a:	491a      	ldr	r1, [pc, #104]	@ (8005994 <__ieee754_pow+0xa6c>)
 800592c:	2000      	movs	r0, #0
 800592e:	f7ff bb18 	b.w	8004f62 <__ieee754_pow+0x3a>
 8005932:	2000      	movs	r0, #0
 8005934:	2100      	movs	r1, #0
 8005936:	f7ff bb14 	b.w	8004f62 <__ieee754_pow+0x3a>
 800593a:	4630      	mov	r0, r6
 800593c:	4639      	mov	r1, r7
 800593e:	f7ff bb10 	b.w	8004f62 <__ieee754_pow+0x3a>
 8005942:	460c      	mov	r4, r1
 8005944:	f7ff bb5e 	b.w	8005004 <__ieee754_pow+0xdc>
 8005948:	2400      	movs	r4, #0
 800594a:	f7ff bb49 	b.w	8004fe0 <__ieee754_pow+0xb8>
 800594e:	bf00      	nop
 8005950:	00000000 	.word	0x00000000
 8005954:	3fe62e43 	.word	0x3fe62e43
 8005958:	fefa39ef 	.word	0xfefa39ef
 800595c:	3fe62e42 	.word	0x3fe62e42
 8005960:	0ca86c39 	.word	0x0ca86c39
 8005964:	be205c61 	.word	0xbe205c61
 8005968:	72bea4d0 	.word	0x72bea4d0
 800596c:	3e663769 	.word	0x3e663769
 8005970:	c5d26bf1 	.word	0xc5d26bf1
 8005974:	3ebbbd41 	.word	0x3ebbbd41
 8005978:	af25de2c 	.word	0xaf25de2c
 800597c:	3f11566a 	.word	0x3f11566a
 8005980:	16bebd93 	.word	0x16bebd93
 8005984:	3f66c16c 	.word	0x3f66c16c
 8005988:	5555553e 	.word	0x5555553e
 800598c:	3fc55555 	.word	0x3fc55555
 8005990:	fff00000 	.word	0xfff00000
 8005994:	3ff00000 	.word	0x3ff00000
 8005998:	4090cbff 	.word	0x4090cbff
 800599c:	3f6f3400 	.word	0x3f6f3400
 80059a0:	3fe00000 	.word	0x3fe00000
 80059a4:	652b82fe 	.word	0x652b82fe
 80059a8:	3c971547 	.word	0x3c971547
 80059ac:	4090cc00 	.word	0x4090cc00

080059b0 <fabs>:
 80059b0:	ec51 0b10 	vmov	r0, r1, d0
 80059b4:	4602      	mov	r2, r0
 80059b6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80059ba:	ec43 2b10 	vmov	d0, r2, r3
 80059be:	4770      	bx	lr

080059c0 <scalbn>:
 80059c0:	b570      	push	{r4, r5, r6, lr}
 80059c2:	ec55 4b10 	vmov	r4, r5, d0
 80059c6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80059ca:	4606      	mov	r6, r0
 80059cc:	462b      	mov	r3, r5
 80059ce:	b991      	cbnz	r1, 80059f6 <scalbn+0x36>
 80059d0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80059d4:	4323      	orrs	r3, r4
 80059d6:	d03d      	beq.n	8005a54 <scalbn+0x94>
 80059d8:	4b35      	ldr	r3, [pc, #212]	@ (8005ab0 <scalbn+0xf0>)
 80059da:	4620      	mov	r0, r4
 80059dc:	4629      	mov	r1, r5
 80059de:	2200      	movs	r2, #0
 80059e0:	f7fa fdae 	bl	8000540 <__aeabi_dmul>
 80059e4:	4b33      	ldr	r3, [pc, #204]	@ (8005ab4 <scalbn+0xf4>)
 80059e6:	429e      	cmp	r6, r3
 80059e8:	4604      	mov	r4, r0
 80059ea:	460d      	mov	r5, r1
 80059ec:	da0f      	bge.n	8005a0e <scalbn+0x4e>
 80059ee:	a328      	add	r3, pc, #160	@ (adr r3, 8005a90 <scalbn+0xd0>)
 80059f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f4:	e01e      	b.n	8005a34 <scalbn+0x74>
 80059f6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80059fa:	4291      	cmp	r1, r2
 80059fc:	d10b      	bne.n	8005a16 <scalbn+0x56>
 80059fe:	4622      	mov	r2, r4
 8005a00:	4620      	mov	r0, r4
 8005a02:	4629      	mov	r1, r5
 8005a04:	f7fa fbe6 	bl	80001d4 <__adddf3>
 8005a08:	4604      	mov	r4, r0
 8005a0a:	460d      	mov	r5, r1
 8005a0c:	e022      	b.n	8005a54 <scalbn+0x94>
 8005a0e:	460b      	mov	r3, r1
 8005a10:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005a14:	3936      	subs	r1, #54	@ 0x36
 8005a16:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8005a1a:	4296      	cmp	r6, r2
 8005a1c:	dd0d      	ble.n	8005a3a <scalbn+0x7a>
 8005a1e:	2d00      	cmp	r5, #0
 8005a20:	a11d      	add	r1, pc, #116	@ (adr r1, 8005a98 <scalbn+0xd8>)
 8005a22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a26:	da02      	bge.n	8005a2e <scalbn+0x6e>
 8005a28:	a11d      	add	r1, pc, #116	@ (adr r1, 8005aa0 <scalbn+0xe0>)
 8005a2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a2e:	a31a      	add	r3, pc, #104	@ (adr r3, 8005a98 <scalbn+0xd8>)
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	f7fa fd84 	bl	8000540 <__aeabi_dmul>
 8005a38:	e7e6      	b.n	8005a08 <scalbn+0x48>
 8005a3a:	1872      	adds	r2, r6, r1
 8005a3c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005a40:	428a      	cmp	r2, r1
 8005a42:	dcec      	bgt.n	8005a1e <scalbn+0x5e>
 8005a44:	2a00      	cmp	r2, #0
 8005a46:	dd08      	ble.n	8005a5a <scalbn+0x9a>
 8005a48:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005a4c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005a50:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005a54:	ec45 4b10 	vmov	d0, r4, r5
 8005a58:	bd70      	pop	{r4, r5, r6, pc}
 8005a5a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005a5e:	da08      	bge.n	8005a72 <scalbn+0xb2>
 8005a60:	2d00      	cmp	r5, #0
 8005a62:	a10b      	add	r1, pc, #44	@ (adr r1, 8005a90 <scalbn+0xd0>)
 8005a64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a68:	dac1      	bge.n	80059ee <scalbn+0x2e>
 8005a6a:	a10f      	add	r1, pc, #60	@ (adr r1, 8005aa8 <scalbn+0xe8>)
 8005a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a70:	e7bd      	b.n	80059ee <scalbn+0x2e>
 8005a72:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005a76:	3236      	adds	r2, #54	@ 0x36
 8005a78:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005a7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005a80:	4620      	mov	r0, r4
 8005a82:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab8 <scalbn+0xf8>)
 8005a84:	4629      	mov	r1, r5
 8005a86:	2200      	movs	r2, #0
 8005a88:	e7d4      	b.n	8005a34 <scalbn+0x74>
 8005a8a:	bf00      	nop
 8005a8c:	f3af 8000 	nop.w
 8005a90:	c2f8f359 	.word	0xc2f8f359
 8005a94:	01a56e1f 	.word	0x01a56e1f
 8005a98:	8800759c 	.word	0x8800759c
 8005a9c:	7e37e43c 	.word	0x7e37e43c
 8005aa0:	8800759c 	.word	0x8800759c
 8005aa4:	fe37e43c 	.word	0xfe37e43c
 8005aa8:	c2f8f359 	.word	0xc2f8f359
 8005aac:	81a56e1f 	.word	0x81a56e1f
 8005ab0:	43500000 	.word	0x43500000
 8005ab4:	ffff3cb0 	.word	0xffff3cb0
 8005ab8:	3c900000 	.word	0x3c900000

08005abc <with_errno>:
 8005abc:	b510      	push	{r4, lr}
 8005abe:	ed2d 8b02 	vpush	{d8}
 8005ac2:	eeb0 8a40 	vmov.f32	s16, s0
 8005ac6:	eef0 8a60 	vmov.f32	s17, s1
 8005aca:	4604      	mov	r4, r0
 8005acc:	f7ff f984 	bl	8004dd8 <__errno>
 8005ad0:	eeb0 0a48 	vmov.f32	s0, s16
 8005ad4:	eef0 0a68 	vmov.f32	s1, s17
 8005ad8:	ecbd 8b02 	vpop	{d8}
 8005adc:	6004      	str	r4, [r0, #0]
 8005ade:	bd10      	pop	{r4, pc}

08005ae0 <xflow>:
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	b507      	push	{r0, r1, r2, lr}
 8005ae4:	ec51 0b10 	vmov	r0, r1, d0
 8005ae8:	b183      	cbz	r3, 8005b0c <xflow+0x2c>
 8005aea:	4602      	mov	r2, r0
 8005aec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005af0:	e9cd 2300 	strd	r2, r3, [sp]
 8005af4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005af8:	f7fa fd22 	bl	8000540 <__aeabi_dmul>
 8005afc:	ec41 0b10 	vmov	d0, r0, r1
 8005b00:	2022      	movs	r0, #34	@ 0x22
 8005b02:	b003      	add	sp, #12
 8005b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b08:	f7ff bfd8 	b.w	8005abc <with_errno>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
 8005b10:	e7ee      	b.n	8005af0 <xflow+0x10>
 8005b12:	0000      	movs	r0, r0
 8005b14:	0000      	movs	r0, r0
	...

08005b18 <__math_uflow>:
 8005b18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005b20 <__math_uflow+0x8>
 8005b1c:	f7ff bfe0 	b.w	8005ae0 <xflow>
 8005b20:	00000000 	.word	0x00000000
 8005b24:	10000000 	.word	0x10000000

08005b28 <__math_oflow>:
 8005b28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005b30 <__math_oflow+0x8>
 8005b2c:	f7ff bfd8 	b.w	8005ae0 <xflow>
 8005b30:	00000000 	.word	0x00000000
 8005b34:	70000000 	.word	0x70000000

08005b38 <__ieee754_sqrt>:
 8005b38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3c:	4a68      	ldr	r2, [pc, #416]	@ (8005ce0 <__ieee754_sqrt+0x1a8>)
 8005b3e:	ec55 4b10 	vmov	r4, r5, d0
 8005b42:	43aa      	bics	r2, r5
 8005b44:	462b      	mov	r3, r5
 8005b46:	4621      	mov	r1, r4
 8005b48:	d110      	bne.n	8005b6c <__ieee754_sqrt+0x34>
 8005b4a:	4622      	mov	r2, r4
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	4629      	mov	r1, r5
 8005b50:	f7fa fcf6 	bl	8000540 <__aeabi_dmul>
 8005b54:	4602      	mov	r2, r0
 8005b56:	460b      	mov	r3, r1
 8005b58:	4620      	mov	r0, r4
 8005b5a:	4629      	mov	r1, r5
 8005b5c:	f7fa fb3a 	bl	80001d4 <__adddf3>
 8005b60:	4604      	mov	r4, r0
 8005b62:	460d      	mov	r5, r1
 8005b64:	ec45 4b10 	vmov	d0, r4, r5
 8005b68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b6c:	2d00      	cmp	r5, #0
 8005b6e:	dc0e      	bgt.n	8005b8e <__ieee754_sqrt+0x56>
 8005b70:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8005b74:	4322      	orrs	r2, r4
 8005b76:	d0f5      	beq.n	8005b64 <__ieee754_sqrt+0x2c>
 8005b78:	b19d      	cbz	r5, 8005ba2 <__ieee754_sqrt+0x6a>
 8005b7a:	4622      	mov	r2, r4
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	4629      	mov	r1, r5
 8005b80:	f7fa fb26 	bl	80001d0 <__aeabi_dsub>
 8005b84:	4602      	mov	r2, r0
 8005b86:	460b      	mov	r3, r1
 8005b88:	f7fa fe04 	bl	8000794 <__aeabi_ddiv>
 8005b8c:	e7e8      	b.n	8005b60 <__ieee754_sqrt+0x28>
 8005b8e:	152a      	asrs	r2, r5, #20
 8005b90:	d115      	bne.n	8005bbe <__ieee754_sqrt+0x86>
 8005b92:	2000      	movs	r0, #0
 8005b94:	e009      	b.n	8005baa <__ieee754_sqrt+0x72>
 8005b96:	0acb      	lsrs	r3, r1, #11
 8005b98:	3a15      	subs	r2, #21
 8005b9a:	0549      	lsls	r1, r1, #21
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0fa      	beq.n	8005b96 <__ieee754_sqrt+0x5e>
 8005ba0:	e7f7      	b.n	8005b92 <__ieee754_sqrt+0x5a>
 8005ba2:	462a      	mov	r2, r5
 8005ba4:	e7fa      	b.n	8005b9c <__ieee754_sqrt+0x64>
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	3001      	adds	r0, #1
 8005baa:	02dc      	lsls	r4, r3, #11
 8005bac:	d5fb      	bpl.n	8005ba6 <__ieee754_sqrt+0x6e>
 8005bae:	1e44      	subs	r4, r0, #1
 8005bb0:	1b12      	subs	r2, r2, r4
 8005bb2:	f1c0 0420 	rsb	r4, r0, #32
 8005bb6:	fa21 f404 	lsr.w	r4, r1, r4
 8005bba:	4323      	orrs	r3, r4
 8005bbc:	4081      	lsls	r1, r0
 8005bbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bc2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8005bc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bca:	07d2      	lsls	r2, r2, #31
 8005bcc:	bf5c      	itt	pl
 8005bce:	005b      	lslpl	r3, r3, #1
 8005bd0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8005bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005bd8:	bf58      	it	pl
 8005bda:	0049      	lslpl	r1, r1, #1
 8005bdc:	2600      	movs	r6, #0
 8005bde:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8005be2:	106d      	asrs	r5, r5, #1
 8005be4:	0049      	lsls	r1, r1, #1
 8005be6:	2016      	movs	r0, #22
 8005be8:	4632      	mov	r2, r6
 8005bea:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8005bee:	1917      	adds	r7, r2, r4
 8005bf0:	429f      	cmp	r7, r3
 8005bf2:	bfde      	ittt	le
 8005bf4:	193a      	addle	r2, r7, r4
 8005bf6:	1bdb      	suble	r3, r3, r7
 8005bf8:	1936      	addle	r6, r6, r4
 8005bfa:	0fcf      	lsrs	r7, r1, #31
 8005bfc:	3801      	subs	r0, #1
 8005bfe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8005c02:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005c06:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005c0a:	d1f0      	bne.n	8005bee <__ieee754_sqrt+0xb6>
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	2720      	movs	r7, #32
 8005c10:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8005c14:	429a      	cmp	r2, r3
 8005c16:	eb00 0e0c 	add.w	lr, r0, ip
 8005c1a:	db02      	blt.n	8005c22 <__ieee754_sqrt+0xea>
 8005c1c:	d113      	bne.n	8005c46 <__ieee754_sqrt+0x10e>
 8005c1e:	458e      	cmp	lr, r1
 8005c20:	d811      	bhi.n	8005c46 <__ieee754_sqrt+0x10e>
 8005c22:	f1be 0f00 	cmp.w	lr, #0
 8005c26:	eb0e 000c 	add.w	r0, lr, ip
 8005c2a:	da42      	bge.n	8005cb2 <__ieee754_sqrt+0x17a>
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	db40      	blt.n	8005cb2 <__ieee754_sqrt+0x17a>
 8005c30:	f102 0801 	add.w	r8, r2, #1
 8005c34:	1a9b      	subs	r3, r3, r2
 8005c36:	458e      	cmp	lr, r1
 8005c38:	bf88      	it	hi
 8005c3a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005c3e:	eba1 010e 	sub.w	r1, r1, lr
 8005c42:	4464      	add	r4, ip
 8005c44:	4642      	mov	r2, r8
 8005c46:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8005c4a:	3f01      	subs	r7, #1
 8005c4c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8005c50:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005c54:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005c58:	d1dc      	bne.n	8005c14 <__ieee754_sqrt+0xdc>
 8005c5a:	4319      	orrs	r1, r3
 8005c5c:	d01b      	beq.n	8005c96 <__ieee754_sqrt+0x15e>
 8005c5e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8005ce4 <__ieee754_sqrt+0x1ac>
 8005c62:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8005ce8 <__ieee754_sqrt+0x1b0>
 8005c66:	e9da 0100 	ldrd	r0, r1, [sl]
 8005c6a:	e9db 2300 	ldrd	r2, r3, [fp]
 8005c6e:	f7fa faaf 	bl	80001d0 <__aeabi_dsub>
 8005c72:	e9da 8900 	ldrd	r8, r9, [sl]
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4640      	mov	r0, r8
 8005c7c:	4649      	mov	r1, r9
 8005c7e:	f7fa fedb 	bl	8000a38 <__aeabi_dcmple>
 8005c82:	b140      	cbz	r0, 8005c96 <__ieee754_sqrt+0x15e>
 8005c84:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005c88:	e9da 0100 	ldrd	r0, r1, [sl]
 8005c8c:	e9db 2300 	ldrd	r2, r3, [fp]
 8005c90:	d111      	bne.n	8005cb6 <__ieee754_sqrt+0x17e>
 8005c92:	3601      	adds	r6, #1
 8005c94:	463c      	mov	r4, r7
 8005c96:	1072      	asrs	r2, r6, #1
 8005c98:	0863      	lsrs	r3, r4, #1
 8005c9a:	07f1      	lsls	r1, r6, #31
 8005c9c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8005ca0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8005ca4:	bf48      	it	mi
 8005ca6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8005caa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8005cae:	4618      	mov	r0, r3
 8005cb0:	e756      	b.n	8005b60 <__ieee754_sqrt+0x28>
 8005cb2:	4690      	mov	r8, r2
 8005cb4:	e7be      	b.n	8005c34 <__ieee754_sqrt+0xfc>
 8005cb6:	f7fa fa8d 	bl	80001d4 <__adddf3>
 8005cba:	e9da 8900 	ldrd	r8, r9, [sl]
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	4640      	mov	r0, r8
 8005cc4:	4649      	mov	r1, r9
 8005cc6:	f7fa fead 	bl	8000a24 <__aeabi_dcmplt>
 8005cca:	b120      	cbz	r0, 8005cd6 <__ieee754_sqrt+0x19e>
 8005ccc:	1ca0      	adds	r0, r4, #2
 8005cce:	bf08      	it	eq
 8005cd0:	3601      	addeq	r6, #1
 8005cd2:	3402      	adds	r4, #2
 8005cd4:	e7df      	b.n	8005c96 <__ieee754_sqrt+0x15e>
 8005cd6:	1c63      	adds	r3, r4, #1
 8005cd8:	f023 0401 	bic.w	r4, r3, #1
 8005cdc:	e7db      	b.n	8005c96 <__ieee754_sqrt+0x15e>
 8005cde:	bf00      	nop
 8005ce0:	7ff00000 	.word	0x7ff00000
 8005ce4:	20000068 	.word	0x20000068
 8005ce8:	20000060 	.word	0x20000060

08005cec <_init>:
 8005cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cee:	bf00      	nop
 8005cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cf2:	bc08      	pop	{r3}
 8005cf4:	469e      	mov	lr, r3
 8005cf6:	4770      	bx	lr

08005cf8 <_fini>:
 8005cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfa:	bf00      	nop
 8005cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfe:	bc08      	pop	{r3}
 8005d00:	469e      	mov	lr, r3
 8005d02:	4770      	bx	lr
